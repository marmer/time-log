{"version":3,"sources":["views/DayNavigator.tsx","local/TimeLogRepository.ts","core/TimeLogService.ts","views/TimeLogTableView.tsx","views/DayView.tsx","views/NotFoundView.tsx","views/App.tsx","serviceWorker.ts","index.tsx"],"names":["DayNavigator","props","render","history","dropdownMode","showMonthDropdown","showYearDropdown","useShortMonthInDropdown","showWeekNumbers","todayButton","dateFormat","selected","day","onChange","push","moment","format","window","location","reload","TimeLogRepository","date","timeLogs","dbo","Lockr","get","this","STORE_KEY","timelogKeyFor","set","timelogs","TimeLogService","Promise","resolve","saveTimelogs","getTimeLogsForDay","TimeLogTableView","state","isLoadingTimeLogs","setState","then","target","onSubmit","store","className","scope","map","timeLog","index","key","title","type","inputMode","value","durationInMinutes","event","updateDuration","description","updateDescription","onClick","addTimelogBefore","removeTimelogAt","colSpan","addTimelog","length","saveTimeLogsForDay","splice","Number","parseInt","React","Component","DayView","App","listen","exact","path","to","Date","routeProps","match","params","isValid","toDate","NotFoundView","pathname","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.83414d5f.chunk.js","sourcesContent":["import {Route} from \"react-router-dom\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport moment from \"moment\";\r\nimport React from \"react\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nexport interface DayNavigatorProps {\r\n    day: Date;\r\n}\r\n\r\nexport default function DayNavigator(props: DayNavigatorProps) {\r\n    return <Route render={({history}) =>\r\n        <DatePicker\r\n            dropdownMode={\"scroll\"}\r\n            showMonthDropdown\r\n            showYearDropdown\r\n            useShortMonthInDropdown\r\n            showWeekNumbers\r\n            todayButton=\"today\"\r\n            dateFormat=\"yyyy-MM-dd\"\r\n            selected={props.day}\r\n            onChange={day => {\r\n                if (day) {\r\n                    history.push(`/days/${moment(day).format(\"YYYY-MM-DD\")}`);\r\n                    window.location.reload();\r\n                }\r\n            }}\r\n        />}/>;\r\n}\r\n","import {TimeLog} from \"../core/TimeLogService\";\r\nimport Lockr from \"lockr\";\r\nimport moment from \"moment\";\r\n\r\ninterface TimeLogDbo {\r\n    [day: string]: TimeLog[]\r\n}\r\n\r\nexport default class TimeLogRepository {\r\n    private static readonly STORE_KEY = \"TimeLog\";\r\n\r\n    public static saveTimelogs(date: Date, timeLogs: TimeLog[]): TimeLog[] {\r\n        const dbo: TimeLogDbo = Lockr.get(this.STORE_KEY, {});\r\n        dbo[TimeLogRepository.timelogKeyFor(date)] = timeLogs;\r\n        Lockr.set(TimeLogRepository.STORE_KEY, dbo);\r\n        return timeLogs;\r\n    }\r\n\r\n    public static getTimeLogsForDay(date: Date): TimeLog[] {\r\n\r\n        const timeLog: TimeLogDbo = Lockr.get(this.STORE_KEY, {});\r\n\r\n        const key = this.timelogKeyFor(date);\r\n        const timelogs = timeLog[key];\r\n        return timelogs ? timelogs : [];\r\n    }\r\n\r\n    private static timelogKeyFor(date: Date) {\r\n        return moment(date).format(\"YYYY-MM-DD\");\r\n    }\r\n}\r\n","import TimeLogRepository from \"../local/TimeLogRepository\";\r\n\r\nexport interface TimeLog {\r\n    durationInMinutes: number;\r\n    description: string;\r\n}\r\n\r\nexport default class TimeLogService {\r\n    public static async saveTimeLogsForDay(date: Date, timeLogs: TimeLog[]): Promise<TimeLog[]> {\r\n        return Promise.resolve(TimeLogRepository.saveTimelogs(date, timeLogs));\r\n    }\r\n\r\n    public static async getTimeLogsForDay(date: Date): Promise<TimeLog[]> {\r\n        return Promise.resolve(TimeLogRepository.getTimeLogsForDay(date));\r\n    }\r\n\r\n}\r\n","import TimeLogService, {TimeLog} from \"../core/TimeLogService\";\r\nimport React from \"react\";\r\n\r\nexport interface TimeLogTableViewProps {\r\n    day: Date;\r\n}\r\n\r\ninterface TimeLogTableViewState {\r\n    timeLogs: TimeLog[];\r\n    isLoadingTimeLogs: boolean;\r\n}\r\n\r\nexport default class TimeLogTableView extends React.Component<TimeLogTableViewProps, TimeLogTableViewState> {\r\n\r\n    constructor(props: Readonly<{ day: Date }>) {\r\n        super(props);\r\n        this.state = {\r\n            timeLogs: [],\r\n            isLoadingTimeLogs: true\r\n        }\r\n    }\r\n\r\n    componentDidMount(): void {\r\n        this.setState({\r\n            isLoadingTimeLogs: true\r\n        });\r\n        TimeLogService.getTimeLogsForDay(this.props.day)\r\n            .then(timeLogs => this.setState({\r\n                timeLogs,\r\n                isLoadingTimeLogs: false\r\n            }));\r\n    }\r\n\r\n    render() {\r\n        return <form target=\"_self\" onSubmit={() => {\r\n            this.store();\r\n            return false\r\n        }}>{\r\n            this.state.isLoadingTimeLogs ?\r\n                <p>Loading...</p> :\r\n                <table className=\"table table-sm\">\r\n                    <thead>\r\n                    <tr>\r\n                        <th scope=\"col\" className=\"text-sm-center\">#</th>\r\n                        <th scope=\"col\" className=\"text-sm-center\">Duration in Minutes</th>\r\n                        <th scope=\"col\" className=\"text-sm-center\">Description</th>\r\n                        <th scope=\"col\" className=\"text-sm-left\">Actions</th>\r\n                    </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                    {this.state.timeLogs.map((timeLog, index) => <tr\r\n                        key={index}>\r\n                        <th className=\"text-sm-center\" title={\"TimeLog \" + index}>{index}</th>\r\n                        <td><input className=\"fullWidth\" title=\"duration\" type=\"text\"\r\n                                   inputMode=\"numeric\"\r\n                                   value={timeLog.durationInMinutes}\r\n                                   onChange={event => this.updateDuration(index, event.target.value)}/></td>\r\n                        <td><input className=\"fullWidth\" title=\"description\" type=\"text\" value={timeLog.description}\r\n                                   onChange={event => this.updateDescription(index, event.target.value)}/>\r\n                        </td>\r\n                        <td>\r\n                            <span className=\"btn-group actions\">\r\n                                <button className=\"btn btn-outline-primary\" title=\"add before\"\r\n                                        onClick={() => this.addTimelogBefore(index)}\r\n                                        type=\"button\">+\r\n                                </button>\r\n                                <button className=\"btn btn-outline-primary\" title=\"remove\"\r\n                                        onClick={() => this.removeTimelogAt(index)}\r\n                                        type=\"button\">-\r\n                                </button>\r\n                            </span>\r\n                        </td>\r\n                    </tr>)}\r\n                    <tr>\r\n                        <th colSpan={4}>\r\n                            <button className=\"btn btn-outline-primary fullWidth\"\r\n                                    type=\"button\"\r\n                                    title=\"add\"\r\n                                    onClick={() => this.addTimelog()}>+\r\n                            </button>\r\n                        </th>\r\n                    </tr>\r\n                    <tr>\r\n                        <th colSpan={4}>\r\n                            <button className=\"btn btn-primary fullWidth\" title=\"save\"\r\n                                    type={\"submit\"}\r\n                            >save\r\n                            </button>\r\n                        </th>\r\n                    </tr>\r\n                    </tbody>\r\n                </table>}</form>\r\n\r\n    }\r\n\r\n    private addTimelog() {\r\n        this.addTimelogBefore(this.state.timeLogs.length + 1);\r\n    }\r\n\r\n    private store() {\r\n        TimeLogService.saveTimeLogsForDay(this.props.day, this.state.timeLogs)\r\n            .then(timeLogs => this.setState({\r\n                timeLogs\r\n            }));\r\n    }\r\n\r\n    private addTimelogBefore(index: number) {\r\n        const timeLogs = [...this.state.timeLogs];\r\n        timeLogs.splice(index, 0, {\r\n            description: \"\",\r\n            durationInMinutes: 0\r\n        });\r\n\r\n        this.setState({\r\n            timeLogs\r\n        })\r\n    }\r\n\r\n    private removeTimelogAt(index: number) {\r\n        const timeLogs = [...this.state.timeLogs];\r\n        timeLogs.splice(index, 1);\r\n\r\n        this.setState({\r\n            timeLogs\r\n        })\r\n    }\r\n\r\n    private updateDuration(index: number, value: string) {\r\n        const timeLogs = [...this.state.timeLogs];\r\n        timeLogs[index].durationInMinutes = Number.parseInt(value);\r\n        this.setState({\r\n            timeLogs\r\n        })\r\n    }\r\n\r\n    private updateDescription(index: number, value: string) {\r\n        const timeLogs = [...this.state.timeLogs];\r\n        timeLogs[index].description = value;\r\n        this.setState({\r\n            timeLogs\r\n        })\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport DayNavigator from \"./DayNavigator\";\r\nimport TimeLogTableView from \"./TimeLogTableView\";\r\n\r\nexport interface DayViewProps {\r\n    day: Date;\r\n}\r\n\r\n\r\nexport default class DayView extends React.Component<DayViewProps> {\r\n\r\n    constructor(props: Readonly<DayViewProps>) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            timeLogs: null\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <DayNavigator day={this.props.day}/>\r\n            <TimeLogTableView day={this.props.day}/>\r\n        </div>\r\n    }\r\n}\r\n","import React from \"react\";\r\n\r\nexport interface NotFoundViewProps {\r\n    location: string;\r\n}\r\n\r\nexport default (props: NotFoundViewProps) => <div>\r\n    <h1>Who told you about this location?</h1>\r\n    <p>Nothing to see here at: <em>{props.location}</em></p>\r\n</div>;\r\n","import React from \"react\";\r\nimport {Redirect, Route, Switch} from \"react-router-dom\";\r\nimport DayView from \"./DayView\";\r\nimport NotFoundView from \"./NotFoundView\";\r\nimport moment from \"moment\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\n\r\nexport default class App extends React.Component {\r\n    render() {\r\n        return (\r\n            <main>\r\n                <Route render={props => {\r\n                    props.history.listen(() => window.location.reload());\r\n                    return <Switch>\r\n                        <Route exact path=\"/\">\r\n                            <Redirect to={\"/days\"}/>\r\n                        </Route>\r\n                        <Route exact path=\"/days\">\r\n                            <Redirect to={\"/days/today\"}/>\r\n                        </Route>\r\n                        <Route exact path=\"/days/today\">\r\n                            <DayView day={new Date()}/>\r\n                        </Route>\r\n                        <Route exact path=\"/days/:day\" render={routeProps =>\r\n                            moment(routeProps.match.params.day).isValid() ?\r\n                                <DayView day={moment(routeProps.match.params.day).toDate()}/> :\r\n                                <NotFoundView location={routeProps.location.pathname}/>}/>\r\n                        <Route render={routeProps => <NotFoundView location={routeProps.location.pathname}/>}/>\r\n                    </Switch>\r\n                }}>\r\n\r\n                </Route>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './views/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {HashRouter} from \"react-router-dom\";\r\nimport \"./index.css\"\r\n\r\nReactDOM.render(<HashRouter><App/></HashRouter>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}