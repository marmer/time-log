{"version":3,"sources":["views/DayNavigator.tsx","local/TimeLogDatabase.ts","local/TimeLogRepository.ts","local/SettingsRepository.ts","core/DailyTimeLogSettingsService.ts","core/TimeLogService.ts","core/JiraTimeService.ts","views/TimelogDayView.tsx","views/DayView.tsx","views/NotFoundView.tsx","core/SearchStringService.ts","google/oauth/GoogleUserInfoCrudService.ts","core/WindowService.ts","local/UserRepository.ts","core/UserService.ts","core/RemoteLoginService.ts","views/LoginView.tsx","views/HeaderView.tsx","views/__spikes__/GoogleDriveSpikeView.tsx","views/DailyTimelogSettingsView.tsx","views/UserView.tsx","views/__spikes__/DevModeView.tsx","views/SettingsView.tsx","serviceWorker.ts","index.tsx","views/App.tsx"],"names":["DayNavigator","props","render","history","title","onClick","push","moment","day","subtract","format","window","location","reload","className","dropdownMode","showMonthDropdown","showYearDropdown","useShortMonthInDropdown","showWeekNumbers","todayButton","dateFormat","selected","onChange","add","TimeLogDatabase","timelogDay","timlogExpectationSettings","version","stores","table","Promise","all","this","clear","Dexie","TimeLogRepository","timelogs","db","put","toKey","then","date","get","startInclusive","endInclusive","where","between","toArray","dbos","map","dbo","reduce","a","b","timeLog","durationInMinutes","initialKey","Date","SettingsRepository","settings","expectedDailyTimeToLogInMinutes","expectedTimelogDays","validFrom","DailyTimeLogSettingsService","dailyTimelogSettings","setExpectedDailyTimelogSettings","getExpectedDailyTimelogSettings","sunday","monday","tuesday","wednesday","thursday","friday","saturday","eightHours","getExpectedDailyTimeToLogInMinutes","configuredHoursToWorkPerDay","resolve","TimeLogService","timeLogs","saveTimelogs","getTimeLogsForDay","dayExclusive","getDate","firstOfMonth","set","endDay","numberOfDaysToTakeIntoAccount","getDateRangeInclusive","filter","isExpectedDay","length","getSumOfTimeLoggedBetween","toDate","loggedTimeSum","range","current","isAfter","clone","jiraSymbolFactorMap","minute","m","symbol","factor","hour","h","JiraTimeService","timeSpentInMinutes","absoluteTimeSpendInMinutes","Math","abs","resultString","hourPartOf","minutePartOf","replace","trim","jiraString","unitSymbols","Object","keys","join","RegExp","test","isValidJiraFormat","Error","isNegative","startsWith","substr","split","toMinutes","toSum","floor","unitStringFor","minutesOf","hoursOf","result","unit","jiraStringPart","match","Number","parseInt","key","v1","v2","TimelogDayView","state","timeLogsInput","loadingState","expectedTimeToLogDeltaInMonthInMinutesUntilExclusive","timelogsSaveError","loadTimelogs","loadExpectedDailyTimeToLogInMinutes","loadExpectedTimeToLogDeltaInMonthInMinutesUntilExclusive","prevProps","prevState","deepEqual","emptyTimelogInput","addTimelog","onKeyDown","e","ctrlKey","store","target","onSubmit","isEachTimeLogValid","error","toString","scope","getDurationSumAsJiraFormat","index","disabled","placeholder","duration","type","value","event","updateDuration","description","updateDescription","addTimelogBefore","removeTimelogAt","colSpan","isAnyTimelogInValid","getDailyExpectationViewValue","getExpectedTimeToLogConsideringTheWholeMonthTillTodayViewValue","setState","getExpectedTimeToLogDeltaInMonthInMinutesUntilExclusive","delta","catch","toTimelogInput","expectedTime","minutesToJiraFormat","getDurationSum","getExpectedTimeToLogTodayOnly","saveTimeLogsForDay","slice","timelogInput","toTimelog","splice","jiraFormatToMinutes","d1","d2","React","Component","DayView","SearchStringService","searchString","removeSearchStringOpening","kvPairs","kvPair","decodeURIComponent","aggregate","toAdd","requestProps","encodeURIComponent","previousValue","currentValue","GoogleUserInfoCrudService","accessToken","fetch","method","headers","response","status","json","dto","email","WindowService","url","href","UserRepository","localStorage","removeItem","Lockr","user","UserService","RemoteLoginService","logout","removeCurrentUser","getCurrentUser","include_granted_scopes","response_type","redirect_uri","process","client_id","redirectUrl","toSearchString","redirectTo","setCurrentUser","currentUser","oauthResponse","parse","getUserInfo","access_token","userInfo","setCurrentuser","sourceUrl","reject","message","LoginView","loginBySearchString","loginResult","loginError","to","src","width","height","alt","projectConfiguration","name","isActive","pathname","activeClassName","FileRespoinseView","files","file","id","content","deleteDriveFile","deleteCallback","loadFiles","setDriveFiles","fileList","driveFiles","f1","f2","forEach","console","log","text","fileContent","df","err","loadFileContentFor","WeekDays","useState","newFileContent","setNewFileContent","random","newFileName","setNewFileName","useEffect","deleteDriveFiles","createFile","missingEnvironmentVariables","getMissingEnvironmentVariables","envVar","redirectToLogin","DevModeView","getItem","UserView","GoogleDriveSpikeView","DailyTimelogSettingsView","dailyTimelogSettingsInputs","setDailyTimelogSettingsInputs","flip","weekDay","expectedDailyTimelog","_","SUNDAY","MONDAY","TUESDAY","WEDNESDAY","THURSDAY","FRIDAY","SATURDAY","checked","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","basename","HeaderView","globalRouteProps","listen","exact","path","loginRoutProps","search","dayRouteProps","params","isValid","NotFoundView","SettingsView","routeProps","document","getElementById","URL","origin","addEventListener","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c877f9bf.chunk.js","sourcesContent":["import {Route} from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport interface DayNavigatorProps {\n    day: Date;\n}\n\nexport default function DayNavigator(props: DayNavigatorProps) {\n    return <Route render={({history}) =>\n        <div>\n            <button title=\"go day back\" onClick={() => {\n                history.push(`/days/${moment(props.day).subtract(1, \"day\").format(\"YYYY-MM-DD\")}`);\n                window.location.reload();\n            }\n            }><i className=\"fa fa-arrow-left\"/></button>\n            <DatePicker\n                dropdownMode={\"scroll\"}\n                showMonthDropdown\n                showYearDropdown\n                useShortMonthInDropdown\n                showWeekNumbers\n                todayButton=\"today\"\n                dateFormat=\"yyyy-MM-dd\"\n                selected={props.day}\n                onChange={day => {\n                    if (day) {\n                        history.push(`/days/${moment(day).format(\"YYYY-MM-DD\")}`);\n                        window.location.reload();\n                    }\n                }}\n            />\n            <button title=\"go day forward\" onClick={() => {\n                history.push(`/days/${moment(props.day).add(1, \"day\").format(\"YYYY-MM-DD\")}`);\n                window.location.reload();\n            }\n            }><i className=\"fa fa-arrow-right\"/></button>\n        </div>}/>;\n}\n","import Dexie from \"dexie\";\nimport {TimeLog} from \"../core/TimeLogService\";\n\nexport default class TimeLogDatabase extends Dexie {\n    timelogDay: Dexie.Table<TimelogDayDbo, string>;\n    timlogExpectationSettings: Dexie.Table<TimlogExpectationSettingsDbo, string>;\n\n    constructor() {\n        super(\"TimeLogDatabase\");\n        this.version(1).stores({\n            timelogDay: 'day, timelogs.durationInMinutes',\n            timlogExpectationSettings: 'validFrom',\n        });\n        this.timelogDay = this.table(\"timelogDay\");\n        this.timlogExpectationSettings = this.table(\"timlogExpectationSettings\");\n    }\n\n    public async clearAllTables() {\n        return Promise.all([\n            this.timelogDay.clear(),\n            this.timlogExpectationSettings.clear()\n        ]);\n    }\n}\n\nexport interface TimelogDayDbo {\n    day: string;\n    timelogs: TimeLog[];\n}\n\nexport interface TimlogExpectationSettingsDbo {\n    validFrom: string,\n    expectedDailyTimeToLogInMinutes: number,\n    expectedTimelogDays: {\n        sunday: boolean,\n        monday: boolean,\n        tuesday: boolean,\n        wednesday: boolean,\n        thursday: boolean,\n        friday: boolean,\n        saturday: boolean\n    }\n}\n","import {TimeLog} from \"../core/TimeLogService\";\nimport TimeLogDatabase from \"./TimeLogDatabase\";\nimport moment from \"moment\";\n\nexport default class TimeLogRepository {\n    private static readonly db = new TimeLogDatabase();\n\n    public static async saveTimelogs(day: Date, timelogs: TimeLog[]): Promise<TimeLog[]> {\n        return TimeLogRepository.db.timelogDay.put({\n            day: TimeLogRepository.toKey(day),\n            timelogs\n        }).then(() => timelogs);\n    }\n\n    public static async getTimeLogsForDay(date: Date): Promise<TimeLog[]> {\n        const timelogDay = await TimeLogRepository.db.timelogDay.get(TimeLogRepository.toKey(date));\n        return timelogDay ? timelogDay.timelogs : [];\n    }\n\n    static async getSumOfTimeLoggedBetween(startInclusive: Date, endInclusive: Date): Promise<number> {\n        return TimeLogRepository.db.timelogDay\n            .where(\"day\")\n            .between(this.toKey(startInclusive), this.toKey(endInclusive), true, true)\n            .toArray()\n            .then(dbos =>\n                dbos.map(dbo => dbo.timelogs)\n                    .reduce((a, b) => [...a, ...b], [])\n                    .map(timeLog => timeLog.durationInMinutes)\n                    .reduce((a, b) => a + b, 0));\n    }\n\n    private static toKey(day: Date): string {\n        return moment(day).format(\"YYYY-MM-DD\");\n    }\n}\n","import TimeLogDatabase from \"./TimeLogDatabase\";\nimport moment from \"moment\";\nimport {DailyTimelogSettings} from \"../core/DailyTimeLogSettingsService\";\n\n\nconst {timlogExpectationSettings} = new TimeLogDatabase();\n\nconst initialKey = moment(new Date(0)).format(\"YYYY-MM-DD\");\nexport default class SettingsRepository {\n    static async getExpectedDailyTimeToLogInMinutes(): Promise<number | null> {\n        const settings = await timlogExpectationSettings.get(initialKey);\n\n        return settings ? settings.expectedDailyTimeToLogInMinutes : null;\n    }\n\n    static async getExpectedDailyTimelogSettings(): Promise<DailyTimelogSettings | null> {\n        const dbo = await timlogExpectationSettings.get(initialKey);\n        return !dbo ?\n            null :\n            {\n                expectedTimelogDays: dbo.expectedTimelogDays,\n                expectedDailyTimeToLogInMinutes: dbo.expectedDailyTimeToLogInMinutes\n            };\n    }\n\n    static async setExpectedDailyTimelogSettings({expectedDailyTimeToLogInMinutes, expectedTimelogDays}: DailyTimelogSettings) {\n        await timlogExpectationSettings.put({\n            validFrom: initialKey,\n            expectedDailyTimeToLogInMinutes,\n            expectedTimelogDays: {...expectedTimelogDays}\n        });\n    }\n}\n","import SettingsRepository from \"../local/SettingsRepository\";\n\n\nexport interface DailyTimelogSettings {\n    expectedDailyTimeToLogInMinutes: number,\n    expectedTimelogDays: {\n        sunday: boolean,\n        monday: boolean,\n        tuesday: boolean,\n        wednesday: boolean,\n        thursday: boolean,\n        friday: boolean,\n        saturday: boolean\n    }\n}\n\nexport default class DailyTimeLogSettingsService {\n    static async setExpectedDailyTimelogSettings(dailyTimelogSettings: DailyTimelogSettings): Promise<void> {\n        await SettingsRepository.setExpectedDailyTimelogSettings(dailyTimelogSettings);\n    }\n\n    static async getExpectedDailyTimelogSettings(): Promise<DailyTimelogSettings> {\n        const settings = await SettingsRepository.getExpectedDailyTimelogSettings();\n        const eightHours = 480;\n        return settings ? settings : {\n            expectedDailyTimeToLogInMinutes: eightHours,\n            expectedTimelogDays: {\n                sunday: false,\n                monday: true,\n                tuesday: true,\n                wednesday: true,\n                thursday: true,\n                friday: true,\n                saturday: false\n            }\n        };\n    }\n\n    static async getExpectedDailyTimeToLogInMinutes(): Promise<number> {\n        const eightHours = 480;\n        const configuredHoursToWorkPerDay = await SettingsRepository.getExpectedDailyTimeToLogInMinutes();\n        return Promise.resolve(configuredHoursToWorkPerDay ? configuredHoursToWorkPerDay : eightHours);\n    }\n}\n","import TimeLogRepository from \"../local/TimeLogRepository\";\nimport DailyTimeLogSettingsService, {DailyTimelogSettings} from \"./DailyTimeLogSettingsService\";\nimport moment, {Moment} from \"moment\";\n\nexport interface TimeLog {\n    durationInMinutes: number;\n    description: string;\n}\n\nexport default class TimeLogService {\n    public static async saveTimeLogsForDay(date: Date, timeLogs: TimeLog[]): Promise<TimeLog[]> {\n        return TimeLogRepository.saveTimelogs(date, timeLogs);\n    }\n\n    public static async getTimeLogsForDay(date: Date): Promise<TimeLog[]> {\n        return TimeLogRepository.getTimeLogsForDay(date);\n    }\n\n\n    public static async getExpectedTimeToLogDeltaInMonthInMinutesUntilExclusive(dayExclusive: Date): Promise<number> {\n        if (dayExclusive.getDate() === 1) return 0;\n\n        const firstOfMonth = moment(dayExclusive).set(\"date\", 1);\n        const endDay = moment(dayExclusive).subtract(1, \"day\");\n        const settings = await DailyTimeLogSettingsService.getExpectedDailyTimelogSettings();\n        const numberOfDaysToTakeIntoAccount = TimeLogService.getDateRangeInclusive(firstOfMonth, endDay)\n            .filter(day => this.isExpectedDay(day, settings)).length;\n        const loggedTimeSum: number = await TimeLogRepository.getSumOfTimeLoggedBetween(firstOfMonth.toDate(), endDay.toDate());\n        return settings.expectedDailyTimeToLogInMinutes * numberOfDaysToTakeIntoAccount - loggedTimeSum;\n    }\n\n    private static isExpectedDay(day: moment.Moment, settings: DailyTimelogSettings) {\n        switch (day.get(\"day\")) {\n            case 1:\n                return settings.expectedTimelogDays.monday;\n            case 2:\n                return settings.expectedTimelogDays.tuesday;\n            case 3:\n                return settings.expectedTimelogDays.wednesday;\n            case 4:\n                return settings.expectedTimelogDays.thursday;\n            case 5:\n                return settings.expectedTimelogDays.friday;\n            case 6:\n                return settings.expectedTimelogDays.saturday;\n            default:\n                return settings.expectedTimelogDays.sunday;\n        }\n    }\n\n    private static getDateRangeInclusive(startInclusive: Moment, endInclusive: Moment): Moment[] {\n        const range: Moment[] = [];\n        let current: Moment = startInclusive;\n        while (!current.isAfter(endInclusive)) {\n            range.push(current);\n            current = current.clone().add(1, \"day\");\n        }\n        return range;\n    }\n}\n","interface Unit {\n    symbol: string;\n    factor: number;\n}\n\nconst jiraSymbolFactorMap: {\n    [symbol: string]: Unit;\n} = {};\n\nconst minute: Unit = jiraSymbolFactorMap.m = {symbol: \"m\", factor: 1};\nconst hour: Unit = jiraSymbolFactorMap.h = {symbol: \"h\", factor: 60 * minute.factor};\n\nexport default class JiraTimeService {\n    public static minutesToJiraFormat(timeSpentInMinutes: number) {\n        const absoluteTimeSpendInMinutes = Math.abs(timeSpentInMinutes);\n        const resultString = `${JiraTimeService.hourPartOf(absoluteTimeSpendInMinutes)} ${JiraTimeService.minutePartOf(absoluteTimeSpendInMinutes)}`\n            .replace(/\\s+/, \" \")\n            .trim();\n        return resultString === \"\" ?\n            \"0\" + minute.symbol :\n            timeSpentInMinutes < 0 ?\n                \"-\" + resultString :\n                resultString;\n    }\n\n    public static isValidJiraFormat(jiraString: string): boolean {\n        const unitSymbols: string = Object.keys(jiraSymbolFactorMap).join();\n        return new RegExp(\"^-?\\\\s*((\\\\d+[\" + unitSymbols + \"]?(\\\\s+\\\\d+[\" + unitSymbols + \"]?)*?)|(0+))?\\\\s*$\").test(jiraString);\n    }\n\n    public static jiraFormatToMinutes(jiraString: string): number {\n        if (!JiraTimeService.isValidJiraFormat(jiraString)) {\n            throw new Error(\"'\" + jiraString + \"' is not a valid jira String\");\n        }\n\n        const isNegative = jiraString.startsWith(\"-\");\n        return (isNegative ? jiraString.substr(1, jiraString.length) : jiraString).split(/\\s+/)\n            .map(JiraTimeService.toMinutes)\n            .reduce(toSum) * (isNegative ? -1 : 1);\n    }\n\n    private static hoursOf(timeSpentInMinutes: number): number {\n        return Math.floor((timeSpentInMinutes / hour.factor));\n    }\n\n    private static minutesOf(timeSpentInMinutes: number): number {\n        return Math.floor((timeSpentInMinutes % hour.factor) / minute.factor);\n    }\n\n    private static minutePartOf(timeSpentInMinutes: number): string {\n        return JiraTimeService.unitStringFor(JiraTimeService.minutesOf(timeSpentInMinutes), minute);\n    }\n\n    private static hourPartOf(timeSpentInMinutes: number): string {\n        return JiraTimeService.unitStringFor(JiraTimeService.hoursOf(timeSpentInMinutes), hour);\n    }\n\n    private static unitStringFor(result: number, unit: Unit): string {\n        return result === 0 ? \"\" : result + unit.symbol;\n    }\n\n    private static toMinutes(jiraStringPart: string): number {\n        return jiraStringPart.trim().match(/^\\d+$/) ?\n            Number.parseInt(jiraStringPart) :\n            Object.keys(jiraSymbolFactorMap)\n                .map(key => jiraSymbolFactorMap[key])\n                .map(unit => {\n                    const match: RegExpMatchArray | null = jiraStringPart.match(new RegExp(\"(\\\\d+)\" + unit.symbol, \"g\"));\n                    return !match ?\n                        0 :\n                        match.map(m => Number.parseInt(m.replace(unit.symbol, \"\"), 0) * unit.factor)\n                            .reduce(toSum);\n                })\n                .reduce(toSum);\n    }\n}\n\nfunction toSum(v1: number, v2: number): number {\n    return v1 + v2;\n}\n","import TimeLogService, {TimeLog} from \"../core/TimeLogService\";\nimport React from \"react\";\nimport JiraTimeService from \"../core/JiraTimeService\";\nimport \"./TimelogDayView.css\"\n\nimport deepEqual from \"deep-equal\"\nimport DailyTimeLogSettingsService from \"../core/DailyTimeLogSettingsService\";\nimport {AsyncValueType} from \"./AsyncValueType\";\nimport moment from \"moment\";\n\nexport interface TimelogDayViewProps {\n    day: Date;\n}\n\ninterface TimelogInput {\n    duration: string;\n    description: string;\n}\n\ninterface TimelogDayViewState {\n    timeLogsInput: TimelogInput[];\n    timelogs: AsyncValueType<TimeLog[]>\n    timelogsSaveError: Error | null\n    expectedDailyTimeToLogInMinutes: AsyncValueType<number>;\n    expectedTimeToLogDeltaInMonthInMinutesUntilExclusive: AsyncValueType<number>\n}\n\nexport default class TimelogDayView extends React.Component<TimelogDayViewProps, TimelogDayViewState> {\n\n    private static readonly emptyTimelogInput = {\n        description: \"\",\n        duration: \"\"\n    };\n\n    constructor(props: Readonly<{ day: Date }>) {\n        super(props);\n        this.state = {\n            timeLogsInput: [],\n            timelogs: {\n                loadingState: \"LOADING\"\n            },\n            expectedDailyTimeToLogInMinutes: {\n                loadingState: \"LOADING\"\n            },\n            expectedTimeToLogDeltaInMonthInMinutesUntilExclusive: {\n                loadingState: \"LOADING\"\n            },\n            timelogsSaveError: null\n        }\n    }\n\n    private static toTimelog(timelogInput: TimelogInput): TimeLog {\n        return {\n            description: timelogInput.description,\n            durationInMinutes: JiraTimeService.jiraFormatToMinutes(timelogInput.duration)\n        };\n    }\n\n    private static toTimelogInput({description, durationInMinutes}: TimeLog) {\n        return {\n            description,\n            duration: JiraTimeService.minutesToJiraFormat(durationInMinutes)\n        };\n    }\n\n    componentDidMount(): void {\n        this.loadTimelogs();\n        this.loadExpectedDailyTimeToLogInMinutes();\n        this.loadExpectedTimeToLogDeltaInMonthInMinutesUntilExclusive();\n    }\n\n    componentDidUpdate(prevProps: Readonly<TimelogDayViewProps>, prevState: Readonly<TimelogDayViewState>,): void {\n        if (!deepEqual(this.state.timeLogsInput[this.state.timeLogsInput.length - 1], TimelogDayView.emptyTimelogInput)) {\n            this.addTimelog();\n        }\n    }\n\n    render() {\n        return <div onKeyDown={e => {\n            if (e.ctrlKey && e.key === \"s\") {\n                this.store();\n            }\n        }}>\n            <form target=\"_self\" onSubmit={() => {\n                if (this.isEachTimeLogValid())\n                    this.store();\n                return false\n            }}>{\n                this.state.timelogs.loadingState === \"LOADING\" ?\n                    <p>Loading...</p> :\n                    this.state.timelogs.loadingState === \"ERROR\" ?\n                        <p>Try reloading... {this.state.timelogs.error.toString()}</p> :\n                        this.state.timelogsSaveError ?\n                            <p>Try again... {this.state.timelogsSaveError.toString()}</p> :\n                            <table className=\"table table-sm\">\n                                <thead>\n                                <tr>\n                                    <th scope=\"col\" className=\"text-sm-center\">#</th>\n                                    <th scope=\"col\" className=\"text-sm-center\">Start Time</th>\n                                    <th scope=\"col\"\n                                        className=\"text-sm-center\">Duration <em>{this.getDurationSumAsJiraFormat()}</em>\n                                    </th>\n                                    <th scope=\"col\" className=\"text-sm-center\">Description</th>\n                                    <th scope=\"col\" className=\"text-sm-center\">Issue</th>\n                                    <th scope=\"col\" className=\"text-sm-center\">Notes</th>\n                                    <th scope=\"col\" className=\"text-sm-left\">Actions</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n                                {this.state.timeLogsInput.map((timeLog, index) => <tr\n                                    key={index}>\n                                    <th className=\"text-sm-center\" title={\"TimeLog \" + index}>{index}</th>\n                                    <td><input className={\"fullWidth\"} disabled title=\"start time\" placeholder=\"09:15\"/>\n                                    </td>\n                                    <td><input\n                                        className={\"fullWidth\" + (JiraTimeService.isValidJiraFormat(timeLog.duration) ? \"\" : \" invalid-format\")}\n                                        title=\"duration\" type=\"text\"\n                                        placeholder={\"5h 15m\"}\n                                        value={timeLog.duration}\n                                        onChange={event => this.updateDuration(index, event.target.value)}/></td>\n                                    <td><input className=\"fullWidth\" title=\"description\" type=\"text\"\n                                               placeholder={\"What did you to here\"} value={timeLog.description}\n                                               onChange={event => this.updateDescription(index, event.target.value)}/>\n                                    </td>\n                                    <td><input className={\"fullWidth\"} disabled title=\"issue\"\n                                               placeholder={\"e.g. ISSUEID-123\"}/></td>\n                                    <td><input className={\"fullWidth\"} disabled title=\"notes\"\n                                               placeholder={\"Not supposed to get exported\"}/></td>\n                                    <td>\n                            <span className=\"btn-group actions\">\n                                <button className=\"btn btn-outline-primary\" title=\"add before this entry\"\n                                        onClick={() => this.addTimelogBefore(index)}\n                                        type=\"button\">\n                                    <i className=\"fa fa-plus-circle\"/>\n                                </button>\n                                {index < this.state.timeLogsInput.length - 1 ?\n                                    <button className=\"btn btn-outline-primary\" title=\"remove this entry\"\n                                            onClick={() => this.removeTimelogAt(index)}\n                                            type=\"button\">\n                                        <i className=\"fa fa-minus-circle\"/>\n                                    </button> : <></>}\n                            </span>\n                                </td>\n                            </tr>)}\n                            <tr>\n                                <th colSpan={7}>\n                                    <button className=\"btn btn-primary fullWidth\" title=\"save\"\n                                            disabled={this.isAnyTimelogInValid()}\n                                            type={\"submit\"}\n                                    ><i className=\"fa fa-save\"/> save\n                                    </button>\n                                </th>\n                            </tr>\n                            </tbody>\n                        </table>}</form>\n\n            <section className=\"stats\">\n                <label>\n                    Expected time to log since {moment(this.props.day).format(\"YYYY-MM-DD\")}: <input disabled\n                                                                                                     title={\"time left today only\"}\n                                                                                                     value={this.getDailyExpectationViewValue()}/>\n                </label>\n                <label>\n                    Expected time to log since {moment(this.props.day).set(\"date\", 1).format(\"YYYY-MM-DD\")}: <input\n                    disabled\n                    title={\"time left monthly\"}\n                    value={this.getExpectedTimeToLogConsideringTheWholeMonthTillTodayViewValue()}/>\n                </label>\n            </section>\n        </div>\n\n    }\n\n    private loadExpectedTimeToLogDeltaInMonthInMinutesUntilExclusive() {\n        this.setState({\n            expectedTimeToLogDeltaInMonthInMinutesUntilExclusive: {\n                loadingState: \"LOADING\",\n            }\n        });\n        TimeLogService.getExpectedTimeToLogDeltaInMonthInMinutesUntilExclusive(this.props.day)\n            .then(delta => this.setState({\n                expectedTimeToLogDeltaInMonthInMinutesUntilExclusive: {\n                    loadingState: \"DONE\",\n                    value: delta\n                }\n            }))\n            .catch(error => {\n                this.setState({\n                    expectedTimeToLogDeltaInMonthInMinutesUntilExclusive: {\n                        loadingState: \"ERROR\",\n                        error\n                    }\n                })\n            });\n    }\n\n    private loadTimelogs() {\n        this.setState({\n            timelogs: {loadingState: \"LOADING\"}\n        });\n        TimeLogService.getTimeLogsForDay(this.props.day)\n            .then(timeLogs => {\n                this.setState({\n                    timeLogsInput: timeLogs.length === 0 ? [{...TimelogDayView.emptyTimelogInput}] : timeLogs.map((timeLog) => TimelogDayView.toTimelogInput(timeLog)),\n                    timelogs: {\n                        loadingState: \"DONE\",\n                        value: timeLogs\n                    },\n                });\n            })\n            .catch(error => {\n                this.setState({\n                    timelogs: {\n                        loadingState: \"ERROR\",\n                        error\n                    }\n                })\n            });\n    }\n\n    private loadExpectedDailyTimeToLogInMinutes() {\n        this.setState({\n            expectedDailyTimeToLogInMinutes: {\n                loadingState: \"LOADING\"\n            }\n        });\n        DailyTimeLogSettingsService.getExpectedDailyTimeToLogInMinutes()\n            .then(expectedTime => this.setState({\n                expectedDailyTimeToLogInMinutes: {\n                    loadingState: \"DONE\",\n                    value: expectedTime\n                }\n            }))\n            .catch(error => this.setState({\n                expectedDailyTimeToLogInMinutes: {\n                    loadingState: \"ERROR\",\n                    error\n                }\n            }));\n    }\n\n    private getDailyExpectationViewValue() {\n\n        switch (this.state.expectedDailyTimeToLogInMinutes.loadingState) {\n            case \"LOADING\":\n                return \"Loading...\";\n            case \"DONE\":\n                return JiraTimeService.minutesToJiraFormat(\n                    this.state.expectedDailyTimeToLogInMinutes.value - this.getDurationSum()\n                );\n            case \"ERROR\":\n            default:\n                return this.state.expectedDailyTimeToLogInMinutes.error.toString();\n        }\n    }\n\n    private getExpectedTimeToLogTodayOnly() {\n        return this.state.expectedDailyTimeToLogInMinutes.loadingState === \"DONE\" ?\n            this.state.expectedDailyTimeToLogInMinutes.value - this.getDurationSum() :\n            0;\n    }\n\n    private getExpectedTimeToLogConsideringTheWholeMonthTillTodayViewValue() {\n        if (this.state.expectedTimeToLogDeltaInMonthInMinutesUntilExclusive.loadingState === \"LOADING\" || this.state.expectedDailyTimeToLogInMinutes.loadingState === \"LOADING\") {\n            return \"Loading...\";\n        } else if (this.state.expectedTimeToLogDeltaInMonthInMinutesUntilExclusive.loadingState === \"DONE\" && this.state.expectedDailyTimeToLogInMinutes.loadingState === \"DONE\") {\n            return JiraTimeService.minutesToJiraFormat(this.state.expectedTimeToLogDeltaInMonthInMinutesUntilExclusive.value + this.getExpectedTimeToLogTodayOnly());\n        } else if (this.state.expectedDailyTimeToLogInMinutes.loadingState === \"ERROR\") {\n            return this.state.expectedDailyTimeToLogInMinutes.error.toString();\n        } else if (this.state.expectedTimeToLogDeltaInMonthInMinutesUntilExclusive.loadingState === \"ERROR\")\n            return this.state.expectedTimeToLogDeltaInMonthInMinutesUntilExclusive.error.toString();\n    }\n\n    private addTimelog() {\n        this.addTimelogBefore(this.state.timeLogsInput.length + 1);\n    }\n\n    private store() {\n        TimeLogService.saveTimeLogsForDay(this.props.day, this.state.timeLogsInput\n            // the last one is always empty ;)\n            .slice(0, this.state.timeLogsInput.length - 1)\n            .map(timelogInput => (TimelogDayView.toTimelog(timelogInput))))\n            .then(timeLogs => this.setState({\n                timeLogsInput: timeLogs.map(timeLog => TimelogDayView.toTimelogInput(timeLog)),\n                timelogsSaveError: null\n            }))\n            .catch(error => this.setState({\n                timelogsSaveError: error\n            }));\n    }\n\n    private addTimelogBefore(index: number) {\n        const timeLogs = [...this.state.timeLogsInput];\n        timeLogs.splice(index, 0, {...TimelogDayView.emptyTimelogInput});\n\n        this.setState({\n            timeLogsInput: timeLogs\n        })\n    }\n\n    private removeTimelogAt(index: number) {\n        const timeLogs = [...this.state.timeLogsInput];\n        timeLogs.splice(index, 1);\n\n        this.setState({\n            timeLogsInput: timeLogs\n        })\n    }\n\n    private updateDuration(index: number, value: string) {\n        const timeLogs = [...this.state.timeLogsInput];\n        timeLogs[index].duration = value;\n        this.setState({\n            timeLogsInput: timeLogs\n        })\n    }\n\n    private updateDescription(index: number, value: string) {\n        const timeLogs = [...this.state.timeLogsInput];\n        timeLogs[index].description = value;\n        this.setState({\n            timeLogsInput: timeLogs\n        })\n    }\n\n    private isAnyTimelogInValid() {\n        return !this.isEachTimeLogValid();\n    }\n\n    private isEachTimeLogValid() {\n        return this.state.timeLogsInput\n            .map(timeLog => JiraTimeService.isValidJiraFormat(timeLog.duration))\n            .reduce((v1, v2) => v1 && v2, true);\n    }\n\n    private getDurationSumAsJiraFormat() {\n        return JiraTimeService.minutesToJiraFormat(this.getDurationSum());\n    }\n\n    private getDurationSum() {\n        return this.state.timeLogsInput\n            .map(({duration}) => JiraTimeService.isValidJiraFormat(duration) ? JiraTimeService.jiraFormatToMinutes(duration) : 0)\n            .reduce((d1, d2) => d1 + d2, 0);\n    }\n}\n","import React from \"react\";\nimport DayNavigator from \"./DayNavigator\";\nimport TimelogDayView from \"./TimelogDayView\";\n\nexport interface DayViewProps {\n    day: Date;\n}\n\n\nexport default class DayView extends React.Component<DayViewProps> {\n\n    constructor(props: Readonly<DayViewProps>) {\n        super(props);\n\n        this.state = {\n            timeLogs: null\n        }\n    }\n\n    render() {\n        return <div className=\"card\">\n            <div className=\"card-header d-flex justify-content-center\">\n                <DayNavigator day={this.props.day}/>\n            </div>\n\n            <div className=\"card-body\">\n                <TimelogDayView day={this.props.day}/>\n            </div>\n        </div>\n    }\n}\n","import React from \"react\";\n\nexport interface NotFoundViewProps {\n    location: string;\n}\n\nexport default (props: NotFoundViewProps) => <div>\n    <h1>Who told you about this location?</h1>\n    <p>Nothing to see here at: <em>{props.location}</em></p>\n</div>;\n","export default class SearchStringService {\n\n    static parse<T>(searchString: string): T {\n        return this.removeSearchStringOpening(searchString)\n            .split(\"&\")\n            .filter(kvPairs => kvPairs[0])\n            .map(kvPair => kvPair.split(\"=\"))\n            .map((([key, value]) =>\n                ({[key]: value ? decodeURIComponent(value) : \"\"})))\n            .reduce((aggregate, toAdd) =>\n                ({...aggregate, ...toAdd}), {}) as any;\n    }\n\n    static toSearchString(requestProps: { [p: string]: string | number | boolean }) {\n\n        if (!Object.keys(requestProps).length)\n            return \"?\";\n\n        return \"?\" + Object.keys(requestProps)\n            .map((key: string) => key + \"=\" + encodeURIComponent(requestProps[key]))\n            .reduce((previousValue, currentValue) => previousValue + \"&\" + currentValue);\n    }\n\n    private static removeSearchStringOpening(searchString: string) {\n        return searchString.replace(/^\\?/, \"\");\n    }\n}\n","export interface GoogleUserInfo {\n    email: string;\n}\n\nexport interface GoogleUserDto {\n    id: string;\n    email: string;\n    verified_email: boolean;\n    picture: string\n}\n\nexport default class GoogleUserInfoCrudService {\n\n    static async getUserInfo(accessToken: string): Promise<GoogleUserInfo> {\n        return fetch(\"https://www.googleapis.com/oauth2/v2/userinfo\", {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": \"Bearer \" + accessToken\n            }\n        })\n            .then(response => {\n                if (response.status !== 200)\n                    throw new Error(\"Cannot get user infos. Request for User infos end with status code \" + response.status);\n                return response.json();\n            })\n            .then((dto: GoogleUserDto) => ({\n                email: dto.email\n            }));\n    }\n}\n","export default class WindowService {\n    static reload() {\n        window.location.reload();\n    }\n\n    static redirectTo(url: string) {\n        window.location.href = url;\n    }\n}\n","import {User} from \"../core/UserService\";\nimport Lockr from \"lockr\";\n\nexport default class UserRepository {\n    static removeCurrentUser() {\n        return localStorage.removeItem(\"user\");\n    }\n\n    static getCurrentUser(): User | null {\n        return Lockr.get(\"user\", null);\n    }\n\n    static setCurrentUser(user: User) {\n        Lockr.set(\"user\", user);\n    }\n}\n","import WindowService from \"./WindowService\";\nimport UserRepository from \"../local/UserRepository\";\nimport SearchStringService from \"./SearchStringService\";\nimport RemoteLoginService from \"./RemoteLoginService\";\n\nexport interface User {\n    email: string\n    accessToken: string\n}\n\nexport default class UserService {\n    static logout() {\n        RemoteLoginService.logout();\n        UserRepository.removeCurrentUser();\n        WindowService.reload();\n    }\n\n    static getCurrentUser(): User | null {\n        return UserRepository.getCurrentUser();\n    }\n\n    static getMissingEnvironmentVariables(): string[] {\n        const result: string[] = [];\n\n        if (!process.env.REACT_APP_OAUTH_CLIENT_ID)\n            result.push(\"REACT_APP_OAUTH_CLIENT_ID\");\n\n        if (!process.env.REACT_APP_OAUTH_REDIRECT_URL)\n            result.push(\"REACT_APP_OAUTH_REDIRECT_URL\");\n\n        if (!process.env.REACT_APP_OAUTH_AUTHORIZATION_URL)\n            result.push(\"REACT_APP_OAUTH_AUTHORIZATION_URL\");\n\n        return result;\n    }\n\n    static redirectToLogin() {\n        const requestProps: { [key: string]: any; } = {\n            scope: \"email https://www.googleapis.com/auth/drive.file\",\n            include_granted_scopes: true,\n            response_type: \"token\",\n            state: \"/\",\n            redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT_URL ? process.env.REACT_APP_OAUTH_REDIRECT_URL : \"\",\n            client_id: process.env.REACT_APP_OAUTH_CLIENT_ID ? process.env.REACT_APP_OAUTH_CLIENT_ID : \"\"\n        };\n\n        const redirectUrl = (process.env.REACT_APP_OAUTH_AUTHORIZATION_URL ? process.env.REACT_APP_OAUTH_AUTHORIZATION_URL : \"\") +\n            SearchStringService.toSearchString(requestProps);\n\n        WindowService.redirectTo(redirectUrl);\n    }\n\n    static setCurrentuser(user: User) {\n        UserRepository.setCurrentUser(user);\n    }\n}\n","import SearchStringService from \"./SearchStringService\";\nimport GoogleUserInfoCrudService from \"../google/oauth/GoogleUserInfoCrudService\";\nimport UserService from \"./UserService\";\n\nexport interface LoginResult {\n    sourceUrl: string\n}\n\nexport interface GoogleOAuthSuccessResponse {\n    state?: string;\n    access_token: string;\n    token_type: \"Bearer\" | string;\n    expires_in: string; // seconds\n}\n\nexport interface GoogleOAuthErrorResponse {\n    error: string;\n}\n\ninterface GoogleOAuthResponse extends GoogleOAuthSuccessResponse, GoogleOAuthErrorResponse {\n}\n\nexport default class RemoteLoginService {\n    static async logout() {\n        const currentUser = UserService.getCurrentUser();\n        return currentUser ?\n            fetch(\"https://oauth2.googleapis.com/revoke?token=\" + UserService.getCurrentUser()?.accessToken, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/x-www-form-urlencoded\"\n                }\n            }) :\n            Promise.resolve()\n    }\n\n    static async loginBySearchString(searchString: string): Promise<LoginResult> {\n        const oauthResponse: GoogleOAuthResponse = SearchStringService.parse(searchString);\n\n        return GoogleUserInfoCrudService.getUserInfo(oauthResponse.access_token)\n            .then(userInfo => {\n                UserService.setCurrentuser({\n                    email: userInfo.email,\n                    accessToken: oauthResponse.access_token,\n                });\n\n                return {\n                    sourceUrl: oauthResponse.state ?\n                        oauthResponse.state :\n                        \"/\"\n                };\n            }).catch(error => Promise.reject(new Error(\"Not able to login the user. Reason: \" + error.message)));\n    }\n}\n","import React from \"react\";\nimport RemoteLoginService, {LoginResult} from \"../core/RemoteLoginService\";\nimport {Redirect} from \"react-router-dom\";\n\nexport interface LoginViewProps {\n    searchString: string;\n}\n\n\nexport default class LoginView extends React.Component<LoginViewProps, { loginResult?: LoginResult, loginError?: Error }> {\n\n\n    constructor(props: Readonly<LoginViewProps>) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount(): void {\n        RemoteLoginService.loginBySearchString(this.props.searchString)\n            .then(loginResult => this.setState({\n                loginResult\n            }))\n            .catch(loginError => this.setState({loginError}))\n    }\n\n    render() {\n        if (this.state.loginResult) {\n            return <Redirect to={this.state.loginResult?.sourceUrl}/>\n        } else if (this.state.loginError) {\n            return <div>Error while trying to log you in. Reason: {this.state.loginError?.message}</div>\n        } else {\n            return <div>requesting user data...</div>;\n        }\n    }\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport projectConfiguration from \"../../package.json\"\nimport {Link, NavLink} from \"react-router-dom\";\n\nexport default () => <header>\n    <nav className=\"navbar navbar-dark bg-dark\">\n        <Link to={\"/days/today\"} className=\"navbar-brand\">\n            <img src=\"/time-log/logo192.png\" width=\"30\" height=\"30\"\n                 className=\"d-inline-block align-top\" alt=\"logo\">\n            </img> {projectConfiguration.name}</Link>\n        <div className=\"navbar-expand\">\n            <div className=\"navbar-nav\">\n                <NavLink to={\"/days/today\"}\n                         isActive={(match, location) => location.pathname.startsWith(\"/day\")}\n                         className=\"nav-item nav-link\"\n                         activeClassName=\"active\">Logs</NavLink>\n                <NavLink to={\"/settings\"} className=\"nav-item nav-link\" activeClassName=\"active\">Settings</NavLink>\n            </div>\n        </div>\n    </nav>\n</header>;\n\n\n","import React, {useEffect, useState} from \"react\";\nimport UserService from \"../../core/UserService\";\n\ninterface File {\n    id: string,\n    name: string,\n    content?: string;\n}\n\ninterface FileListResponseEntryDto {\n    \"id\": string\n    \"name\": string,\n    \"mimeType\": string\n}\n\ninterface GoogleFileListResponseDto {\n    \"files\": FileListResponseEntryDto[]\n}\n\nfunction FileRespoinseView(props: { files: { [id: string]: File }, deleteCallback: (file: File) => void }) {\n    return <div>\n        <table>\n            <thead>\n            <tr>\n                <th>id</th>\n                <th>name</th>\n                <th>content</th>\n                <th>action</th>\n            </tr>\n            </thead>\n            <tbody>\n                {Object.keys(props.files)\n                    .map(key => props.files[key])\n                    .map(file =>\n                        <tr>\n                            <td>{file.id}</td>\n                            <td>{file.name}</td>\n                            <td>{file.content}</td>\n                            <td>\n                                <button onClick={() => {\n                                    deleteDriveFile(file.id)\n                                        .then(() => props.deleteCallback(file));\n                                }}>delete\n                                </button>\n                            </td>\n                        </tr>)}\n            </tbody>\n        </table>\n    </div>\n}\n\nfunction loadFiles(setDriveFiles: (value: (((prevState: { [p: string]: File }) => { [p: string]: File }) | { [p: string]: File })) => void) {\n    if (UserService.getCurrentUser())\n        fetch(\"https://www.googleapis.com/drive/v3/files?=\", {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"accept\": \"application/json\",\n                \"authorization\": \"Bearer \" + UserService.getCurrentUser()?.accessToken\n            }\n        })\n            .then(response => {\n                if (response.status !== 200) throw new Error(\"bad status code\");\n                return response.json();\n            })\n            .then(response => {\n                return response as GoogleFileListResponseDto\n            })\n            .then(fileList => {\n                const driveFiles = fileList.files\n                    .map(({id, name}) => ({[id]: {id, name} as File}))\n                    .reduce((f1, f2) => ({...f1, ...f2}));\n                setDriveFiles(driveFiles);\n\n                loadFileContentFor(driveFiles, setDriveFiles);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n}\n\nfunction loadFileContentFor(driveFiles: { [id: string]: File }, setDriveFiles: (value: (((prevState: { [p: string]: File }) => { [p: string]: File }) | { [p: string]: File })) => void) {\n    if (UserService.getCurrentUser())\n        Object.keys(driveFiles)\n            .forEach(id => {\n                fetch(`https://www.googleapis.com/drive/v3/files/${id}?alt=media`, {\n                    \"method\": \"GET\",\n                    \"headers\": {\n                        \"authorization\": `Bearer ${UserService.getCurrentUser()?.accessToken}`\n                    }\n                })\n                    .then(response => {\n                        console.log(response);\n                        return response.text()\n                    })\n                    .then(fileContent => {\n                        const df = {...driveFiles};\n                        df[id].content = fileContent;\n                        setDriveFiles(df)\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    });\n            });\n}\n\nfunction deleteDriveFile(id: string) {\n    return fetch(`https://www.googleapis.com/drive/v3/files/${id}`, {\n        \"method\": \"DELETE\",\n        \"headers\": {\n            \"accept\": \"application/json\",\n            \"authorization\": `Bearer ${UserService.getCurrentUser()?.accessToken}`\n        }\n    });\n}\n\nfunction deleteDriveFiles(driveFiles: { [p: string]: File }): Promise<any> {\n    if (UserService.getCurrentUser())\n        return Promise.all(Object.keys(driveFiles)\n            .map(id => deleteDriveFile(id)));\n    return Promise.resolve();\n}\n\nfunction createFile(file: { name: string; content: string }): Promise<any> {\n    return fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart\", {\n        \"method\": \"POST\",\n        \"headers\": {\n            \"accept\": \"application/json\",\n            \"content-type\": \"multipart/related; boundary=nice_boundary_name\",\n            \"authorization\": `Bearer ${UserService.getCurrentUser()?.accessToken}`\n        },\n        \"body\": `--nice_boundary_name\nContent-Type: application/json; charset=UTF-8\n\n{\n  \"name\": \"${file.name}\"\n}\n\n--nice_boundary_name\nContent-Type: application/json; charset=UTF-8\n\n${file.content}\n\n--nice_boundary_name--`\n    })\n        .then(response => {\n            console.log(response);\n        })\n        .catch(err => {\n            console.log(err);\n        });\n}\n\n\n// ---- updateExample: ----\n// curl --request PATCH \\\n//   --url 'https://www.googleapis.com/upload/drive/v3/files/1J0v7U2B_GswHPo3Vbuu67jYvtls4uaIQ?uploadType=media' \\\n//   --header 'accept: application/json' \\\n//   --header 'authorization: Bearer ya29.Il-9ByIRxhjOLylx88WfEC6W1uLG42J16nXiAhVTXUkfoh5LLvGUZyN4aMEwh3rBc0RlV8ncjksxy8dzZ31hqEBuaxh9-fTKqsPoweE8uJonGoYIb6doE-6hgRGfClYS3w' \\\n//   --header 'content-type: application/json' \\\n//   --data '{\n// \"newKey\":\"withNewValue\"\n// }'\n\n// ---- search for filename example ----\n// curl --request GET \\\n//   --url 'https://www.googleapis.com/drive/v3/files?q=name%20contains%20'\\''Verzeichnis'\\''' \\\n//   --header 'accept: application/json' \\\n//   --header 'authorization: Bearer ya29.Il-9ByIRxhjOLylx88WfEC6W1uLG42J16nXiAhVTXUkfoh5LLvGUZyN4aMEwh3rBc0RlV8ncjksxy8dzZ31hqEBuaxh9-fTKqsPoweE8uJonGoYIb6doE-6hgRGfClYS3w'\n\nexport default () => {\n    const [driveFiles, setDriveFiles] = useState<{ [id: string]: File }>({});\n    const [newFileContent, setNewFileContent] = useState<string>('{\\n  \"some\": \"content\"\\n}');\n    const [newFileName, setNewFileName] = useState<string>(`${Math.random()}.json`);\n\n    useEffect(() => {\n        loadFiles(setDriveFiles);\n    }, []);\n\n    return <div>\n        <label>File List of google drive files List metadata<FileRespoinseView files={driveFiles}\n                                                                               deleteCallback={file => {\n                                                                                   const df = {...driveFiles};\n                                                                                   delete df[file.id];\n                                                                                   setDriveFiles(df);\n                                                                               }\n                                                                               }/></label>\n        <button onClick={() => {\n            deleteDriveFiles(driveFiles)\n                .then(() => setDriveFiles({}));\n        }}>\n            Delete all!\n        </button>\n        <label>\n            File name\n            <input value={newFileName} onChange={event => setNewFileName(event.target.value)}/>\n        </label>\n        <label>\n            File content\n            <textarea value={newFileContent} onChange={event => setNewFileContent(event.target.value)}/>\n        </label>\n        <button onClick={() => createFile({name: newFileName, content: newFileContent})\n            .then(() => loadFiles(setDriveFiles))}>add\n        </button>\n    </div>\n}\n\n","import React, {useEffect, useState} from \"react\";\nimport DailyTimeLogSettingsService, {DailyTimelogSettings} from \"../core/DailyTimeLogSettingsService\";\nimport JiraTimeService from \"../core/JiraTimeService\";\nimport {AsyncValueType} from \"./AsyncValueType\";\n\nenum WeekDays {\n    SUNDAY,\n    MONDAY,\n    TUESDAY,\n    WEDNESDAY,\n    THURSDAY,\n    FRIDAY,\n    SATURDAY\n}\n\n\nexport default function DailyTimelogSettingsView() {\n    const loadingPlaceholder = \"Loading...\";\n\n    const [dailyTimelogSettingsInputs, setDailyTimelogSettingsInputs] = useState<AsyncValueType<{\n        expectedDailyTimelog: string,\n        expectedTimelogDays: boolean[]\n    }>>({\n        loadingState: \"LOADING\",\n    });\n\n    useEffect(() => {\n        setDailyTimelogSettingsInputs({\n            loadingState: \"LOADING\",\n        });\n        DailyTimeLogSettingsService.getExpectedDailyTimelogSettings()\n            .then((dailyTimelogSettings: DailyTimelogSettings) => {\n                setDailyTimelogSettingsInputs({\n                    loadingState: \"DONE\",\n                    value: {\n                        expectedDailyTimelog: JiraTimeService.minutesToJiraFormat(dailyTimelogSettings.expectedDailyTimeToLogInMinutes),\n                        expectedTimelogDays: [\n                            dailyTimelogSettings.expectedTimelogDays.saturday,\n                            dailyTimelogSettings.expectedTimelogDays.monday,\n                            dailyTimelogSettings.expectedTimelogDays.tuesday,\n                            dailyTimelogSettings.expectedTimelogDays.wednesday,\n                            dailyTimelogSettings.expectedTimelogDays.thursday,\n                            dailyTimelogSettings.expectedTimelogDays.friday,\n                            dailyTimelogSettings.expectedTimelogDays.sunday\n                        ]\n                    }\n                });\n            })\n    }, []);\n\n    function flip(weekDay: WeekDays) {\n        if (dailyTimelogSettingsInputs.loadingState === \"DONE\") {\n            setDailyTimelogSettingsInputs({\n                ...dailyTimelogSettingsInputs,\n                value: {\n                    ...(dailyTimelogSettingsInputs as any).value,\n                    expectedTimelogDays: dailyTimelogSettingsInputs.value.expectedTimelogDays.map((value, index) => index === weekDay ? !value : value)\n                }\n            })\n        }\n    }\n\n    return <div className=\"card\">\n        <div className=\"card-header\">\n            Day Settings\n        </div>\n        <div className=\"form-group row card-body\">\n            <form onSubmit={_ => {\n                if (dailyTimelogSettingsInputs.loadingState === \"DONE\")\n                    DailyTimeLogSettingsService.setExpectedDailyTimelogSettings({\n                        expectedDailyTimeToLogInMinutes: JiraTimeService.jiraFormatToMinutes(dailyTimelogSettingsInputs.value.expectedDailyTimelog),\n                        expectedTimelogDays: {\n                            sunday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.SUNDAY],\n                            monday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.MONDAY],\n                            tuesday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.TUESDAY],\n                            wednesday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.WEDNESDAY],\n                            thursday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.THURSDAY],\n                            friday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.FRIDAY],\n                            saturday: dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.SATURDAY]\n                        }\n                    });\n                return false;\n            }}>\n                <div className=\"d-flex flex-column\">\n                    <label>Expected Time to log per day <input id=\"expectedTimeToLog\" type=\"text\"\n                                                               className={(dailyTimelogSettingsInputs.loadingState === \"DONE\" && JiraTimeService.isValidJiraFormat(dailyTimelogSettingsInputs.value.expectedDailyTimelog) ? \"\" : \" invalid-format\")}\n                                                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                                                               value={dailyTimelogSettingsInputs.loadingState === \"DONE\" ? dailyTimelogSettingsInputs.value.expectedDailyTimelog : loadingPlaceholder}\n                                                               onChange={({target}) => setDailyTimelogSettingsInputs({\n                                                                   ...dailyTimelogSettingsInputs,\n                                                                   loadingState: \"DONE\",\n                                                                   value: {\n                                                                       ...(dailyTimelogSettingsInputs as any).value,\n                                                                       expectedDailyTimelog: target.value\n                                                                   }\n                                                               })}\n                                                               placeholder=\"e.g. 7h 30m\"/>\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={\n                                   dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.MONDAY]\n                               }\n                               onChange={(_) => {\n                                   flip(WeekDays.MONDAY);\n                               }}/> Monday\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.TUESDAY]}\n                               onChange={(_) => {\n                                   flip(WeekDays.TUESDAY);\n                               }}\n                        /> Tuesday\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.WEDNESDAY]}\n                               onChange={(_) => {\n                                   flip(WeekDays.WEDNESDAY);\n                               }}\n                        /> Wednesday\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.THURSDAY]}\n                               onChange={(_) => {\n                                   flip(WeekDays.THURSDAY);\n                               }}\n                        /> Thursday\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.FRIDAY]}\n                               onChange={(_) => {\n                                   flip(WeekDays.FRIDAY);\n                               }}\n                        /> Friday\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.SATURDAY]}\n                               onChange={(_) => {\n                                   flip(WeekDays.SATURDAY);\n                               }}\n                        /> Saturday\n                    </label>\n                    <label>\n                        <input type=\"checkbox\"\n                               disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\"}\n                               checked={dailyTimelogSettingsInputs.loadingState === \"DONE\" && dailyTimelogSettingsInputs.value.expectedTimelogDays[WeekDays.SUNDAY]}\n                               onChange={(_) => {\n                                   flip(WeekDays.SUNDAY);\n                               }}\n                        /> Sunday\n                    </label>\n                    <button className=\"btn btn-primary fullWidth\" title=\"save\"\n                            disabled={dailyTimelogSettingsInputs.loadingState !== \"DONE\" || !JiraTimeService.isValidJiraFormat(dailyTimelogSettingsInputs.value.expectedDailyTimelog)}\n                            type={\"submit\"}><i className=\"fa fa-save\"/> save\n                    </button>\n                </div>\n            </form>\n        </div>\n    </div>\n}\n","import React from \"react\";\nimport UserService from \"../core/UserService\";\n\n\nexport default () => {\n    const missingEnvironmentVariables = UserService.getMissingEnvironmentVariables();\n    if (missingEnvironmentVariables && missingEnvironmentVariables.length) return <section>\n        <strong>Server Missconfiguration. Set the following environment variables are not set properly:</strong>\n        {missingEnvironmentVariables.map(envVar => <div key={envVar}>{envVar}</div>)}\n    </section>;\n\n    const currentUser = UserService.getCurrentUser();\n    return currentUser ? (\n        <section>\n            <p>{currentUser.email}</p>\n            <button onClick={() => UserService.logout()}>\n                Logout\n            </button>\n        </section>\n    ) : (\n        <section>\n            <button onClick={() => UserService.redirectToLogin()}>\n                Login\n            </button>\n        </section>\n    )\n};\n","import GoogleDriveSpikeView from \"./GoogleDriveSpikeView\";\nimport React from \"react\";\nimport UserView from \"../UserView\";\n\nexport default function DevModeView() {\n    return localStorage.getItem(\"devMode\") ? <div className=\"devMode\">\n        <UserView/>\n        <GoogleDriveSpikeView/>\n    </div> : <></>\n}\n","import React from \"react\";\nimport DailyTimelogSettingsView from \"./DailyTimelogSettingsView\";\n\n\nexport default () => {\n    return <section>\n        <DailyTimelogSettingsView/>\n    </section>\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport \"./index.css\"\n\nReactDOM.render(<BrowserRouter basename={\"time-log\"}><App/></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport DayView from \"./DayView\";\nimport NotFoundView from \"./NotFoundView\";\nimport moment from \"moment\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport LoginView from \"./LoginView\";\nimport HeaderView from \"./HeaderView\";\nimport DevModeView from \"./__spikes__/DevModeView\";\nimport SettingsView from \"./SettingsView\";\n\nexport default function App() {\n    return (<>\n            <HeaderView/>\n            <DevModeView/>\n            <main>\n                <Route render={globalRouteProps => {\n                    globalRouteProps.history.listen(() => window.location.reload());\n                    return <Switch>\n                        <Route exact path=\"/login/:provider\"\n                               render={loginRoutProps => <LoginView searchString={loginRoutProps.location.search}/>}/>\n                        <Route exact path=\"/\">\n                            <Redirect to={\"/days\"}/>\n                        </Route>\n                        <Route exact path=\"/days\">\n                            <Redirect to={\"/days/today\"}/>\n                        </Route>\n                        <Route exact path=\"/days/today\">\n                            <DayView day={new Date()}/>\n                        </Route>\n                        <Route exact path=\"/days/:day\" render={dayRouteProps =>\n                            moment(dayRouteProps.match.params.day).isValid() ?\n                                <DayView day={moment(dayRouteProps.match.params.day).toDate()}/> :\n                                <NotFoundView location={dayRouteProps.location.pathname}/>}/>\n                        <Route exact path=\"/settings\">\n                            <SettingsView/>\n                        </Route>\n                        <Route render={routeProps =>\n                            <NotFoundView location={routeProps.location.pathname}/>\n                        }/>\n                    </Switch>\n                }}>\n\n                </Route>\n            </main>\n        </>\n    );\n}\n\n"],"sourceRoot":""}