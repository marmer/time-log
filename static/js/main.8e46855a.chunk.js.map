{"version":3,"sources":["views/DayNavigator.tsx","local/TimeLogRepository.ts","core/TimeLogService.ts","core/JiraTimeService.ts","local/SettingsRepository.ts","core/SettingsService.ts","views/TimelogDayView.tsx","views/DayView.tsx","views/NotFoundView.tsx","core/SearchStringService.ts","google/oauth/GoogleUserInfoCrudService.ts","core/WindowService.ts","local/UserRepository.ts","core/UserService.ts","core/RemoteLoginService.ts","views/LoginView.tsx","views/HeaderView.tsx","views/__spikes__/GoogleDriveSpikeView.tsx","views/UserView.tsx","views/__spikes__/DevModeView.tsx","views/DailyTimelogSettingsView.tsx","views/SettingsView.tsx","serviceWorker.ts","index.tsx","views/App.tsx"],"names":["DayNavigator","props","render","history","title","onClick","push","moment","day","subtract","format","window","location","reload","className","dropdownMode","showMonthDropdown","showYearDropdown","useShortMonthInDropdown","showWeekNumbers","todayButton","dateFormat","selected","onChange","add","TimeLogRepository","date","timeLogs","dbo","Lockr","get","this","getTimelogKeyForMonthOf","timelogKeyFor","set","timelogs","STORE_KEY","TimeLogService","Promise","resolve","saveTimelogs","getTimeLogsForDay","dayInclusive","jiraSymbolFactorMap","minute","m","symbol","factor","hour","h","JiraTimeService","timeSpentInMinutes","absoluteTimeSpendInMinutes","Math","abs","resultString","hourPartOf","minutePartOf","replace","trim","jiraString","unitSymbols","Object","keys","join","RegExp","test","isValidJiraFormat","Error","isNegative","startsWith","substr","length","split","map","toMinutes","reduce","toSum","floor","unitStringFor","minutesOf","hoursOf","result","unit","jiraStringPart","match","Number","parseInt","key","v1","v2","SettingsRepository","expectedDailyTimelogInMinutes","settingsObjectKey","emptySettings","value","timelogSettings","SettingsService","setExpectedDailyTimelogInMinutes","configuredHoursToWorkPerDay","getExpectedDailyTimelogInMinutes","TimelogDayView","state","isLoadingTimeLogs","setState","then","emptyTimelogInput","timeLog","toTimelogInput","expectedTime","expectedDailyTimeToLogInMinutes","getExpectedTimeToLogDeltaInMonthInMinutesUntill","dayBefore","delta","expectedTimeToLogDeltaInMonthInMinutesUntill","prevProps","prevState","deepEqual","addTimelog","onKeyDown","e","ctrlKey","store","target","onSubmit","isEachTimeLogValid","scope","getDurationSumAsJiraFormat","index","disabled","placeholder","duration","type","event","updateDuration","description","updateDescription","addTimelogBefore","removeTimelogAt","colSpan","isAnyTimelogInValid","minutesToJiraFormat","getExpectedTimeToLogTodayOnly","getExpectedTimeToLogConsideringTheWholeMonthTillToday","getDurationSum","toDate","saveTimeLogsForDay","slice","timelogInput","toTimelog","splice","jiraFormatToMinutes","d1","d2","durationInMinutes","React","Component","DayView","SearchStringService","searchString","removeSearchStringOpening","filter","kvPairs","kvPair","decodeURIComponent","aggregate","toAdd","requestProps","encodeURIComponent","previousValue","currentValue","GoogleUserInfoCrudService","accessToken","fetch","method","headers","response","status","json","dto","email","WindowService","url","href","UserRepository","localStorage","removeItem","user","UserService","RemoteLoginService","logout","removeCurrentUser","getCurrentUser","include_granted_scopes","response_type","redirect_uri","process","client_id","redirectUrl","toSearchString","redirectTo","setCurrentUser","currentUser","oauthResponse","parse","getUserInfo","access_token","userInfo","setCurrentuser","sourceUrl","catch","error","reject","message","LoginView","loginBySearchString","loginResult","loginError","to","src","width","height","alt","projectConfiguration","name","isActive","pathname","activeClassName","FileRespoinseView","files","file","id","content","deleteDriveFile","deleteCallback","loadFiles","setDriveFiles","fileList","driveFiles","f1","f2","forEach","console","log","text","fileContent","df","err","loadFileContentFor","useState","newFileContent","setNewFileContent","random","newFileName","setNewFileName","useEffect","all","deleteDriveFiles","createFile","missingEnvironmentVariables","getMissingEnvironmentVariables","envVar","redirectToLogin","DevModeView","getItem","UserView","GoogleDriveSpikeView","DailyTimelogSettingsView","isLoading","minutes","_","isLocalhost","Boolean","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","basename","HeaderView","globalRouteProps","listen","exact","path","loginRoutProps","search","Date","dayRouteProps","params","isValid","NotFoundView","SettingsView","routeProps","document","getElementById","URL","origin","addEventListener","contentType","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8e46855a.chunk.js","sourcesContent":["import {Route} from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport moment from \"moment\";\nimport React from \"react\";\n\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport interface DayNavigatorProps {\n    day: Date;\n}\n\nexport default function DayNavigator(props: DayNavigatorProps) {\n    return <Route render={({history}) =>\n        <div>\n            <button title=\"go day back\" onClick={() => {\n                history.push(`/days/${moment(props.day).subtract(1, \"day\").format(\"YYYY-MM-DD\")}`);\n                window.location.reload();\n            }\n            }><i className=\"fa fa-arrow-left\"/></button>\n            <DatePicker\n                dropdownMode={\"scroll\"}\n                showMonthDropdown\n                showYearDropdown\n                useShortMonthInDropdown\n                showWeekNumbers\n                todayButton=\"today\"\n                dateFormat=\"yyyy-MM-dd\"\n                selected={props.day}\n                onChange={day => {\n                    if (day) {\n                        history.push(`/days/${moment(day).format(\"YYYY-MM-DD\")}`);\n                        window.location.reload();\n                    }\n                }}\n            />\n            <button title=\"go day forward\" onClick={() => {\n                history.push(`/days/${moment(props.day).add(1, \"day\").format(\"YYYY-MM-DD\")}`);\n                window.location.reload();\n            }\n            }><i className=\"fa fa-arrow-right\"/></button>\n        </div>}/>;\n}\n","import {TimeLog} from \"../core/TimeLogService\";\nimport Lockr from \"lockr\";\nimport moment from \"moment\";\n\ninterface TimeLogDbo {\n    [day: string]: TimeLog[]\n}\n\nexport default class TimeLogRepository {\n    private static readonly STORE_KEY = \"TimeLog\";\n\n    public static saveTimelogs(date: Date, timeLogs: TimeLog[]): TimeLog[] {\n        const dbo: TimeLogDbo = Lockr.get(this.getTimelogKeyForMonthOf(date), {});\n        dbo[TimeLogRepository.timelogKeyFor(date)] = timeLogs;\n        Lockr.set(this.getTimelogKeyForMonthOf(date), dbo);\n        return timeLogs;\n    }\n\n    public static getTimeLogsForDay(date: Date): TimeLog[] {\n\n        const timeLog: TimeLogDbo = Lockr.get(this.getTimelogKeyForMonthOf(date), {});\n\n        const key = this.timelogKeyFor(date);\n        const timelogs = timeLog[key];\n        return timelogs ? timelogs : [];\n    }\n\n    private static getTimelogKeyForMonthOf(date: Date) {\n        return TimeLogRepository.STORE_KEY + moment(date).format(\"-YYYY-MM\");\n    }\n\n    private static timelogKeyFor(date: Date) {\n        return moment(date).format(\"YYYY-MM-DD\");\n    }\n}\n","import TimeLogRepository from \"../local/TimeLogRepository\";\n\nexport interface TimeLog {\n    durationInMinutes: number;\n    description: string;\n}\n\nexport default class TimeLogService {\n    public static async saveTimeLogsForDay(date: Date, timeLogs: TimeLog[]): Promise<TimeLog[]> {\n        return Promise.resolve(TimeLogRepository.saveTimelogs(date, timeLogs));\n    }\n\n    public static async getTimeLogsForDay(date: Date): Promise<TimeLog[]> {\n        return Promise.resolve(TimeLogRepository.getTimeLogsForDay(date));\n    }\n\n\n    public static async getExpectedTimeToLogDeltaInMonthInMinutesUntill(dayInclusive: Date): Promise<number> {\n        // TODO: marmer 24.02.2020 implement me!\n        return 0;\n    }\n}\n","interface Unit {\n    symbol: string;\n    factor: number;\n}\n\nconst jiraSymbolFactorMap: {\n    [symbol: string]: Unit;\n} = {};\n\nconst minute: Unit = jiraSymbolFactorMap.m = {symbol: \"m\", factor: 1};\nconst hour: Unit = jiraSymbolFactorMap.h = {symbol: \"h\", factor: 60 * minute.factor};\n\nexport default class JiraTimeService {\n    public static minutesToJiraFormat(timeSpentInMinutes: number) {\n        const absoluteTimeSpendInMinutes = Math.abs(timeSpentInMinutes);\n        const resultString = `${JiraTimeService.hourPartOf(absoluteTimeSpendInMinutes)} ${JiraTimeService.minutePartOf(absoluteTimeSpendInMinutes)}`\n            .replace(/\\s+/, \" \")\n            .trim();\n        return resultString === \"\" ?\n            \"0\" + minute.symbol :\n            timeSpentInMinutes < 0 ?\n                \"-\" + resultString :\n                resultString;\n    }\n\n    public static isValidJiraFormat(jiraString: string): boolean {\n        const unitSymbols: string = Object.keys(jiraSymbolFactorMap).join();\n        return new RegExp(\"^-?\\\\s*((\\\\d+[\" + unitSymbols + \"]?(\\\\s+\\\\d+[\" + unitSymbols + \"]?)*?)|(0+))?\\\\s*$\").test(jiraString);\n    }\n\n    public static jiraFormatToMinutes(jiraString: string): number {\n        if (!JiraTimeService.isValidJiraFormat(jiraString)) {\n            throw new Error(\"'\" + jiraString + \"' is not a valid jira String\");\n        }\n\n        const isNegative = jiraString.startsWith(\"-\");\n        return (isNegative ? jiraString.substr(1, jiraString.length) : jiraString).split(/\\s+/)\n            .map(JiraTimeService.toMinutes)\n            .reduce(toSum) * (isNegative ? -1 : 1);\n    }\n\n    private static hoursOf(timeSpentInMinutes: number): number {\n        return Math.floor((timeSpentInMinutes / hour.factor));\n    }\n\n    private static minutesOf(timeSpentInMinutes: number): number {\n        return Math.floor((timeSpentInMinutes % hour.factor) / minute.factor);\n    }\n\n    private static minutePartOf(timeSpentInMinutes: number): string {\n        return JiraTimeService.unitStringFor(JiraTimeService.minutesOf(timeSpentInMinutes), minute);\n    }\n\n    private static hourPartOf(timeSpentInMinutes: number): string {\n        return JiraTimeService.unitStringFor(JiraTimeService.hoursOf(timeSpentInMinutes), hour);\n    }\n\n    private static unitStringFor(result: number, unit: Unit): string {\n        return result === 0 ? \"\" : result + unit.symbol;\n    }\n\n    private static toMinutes(jiraStringPart: string): number {\n        return jiraStringPart.trim().match(/^\\d+$/) ?\n            Number.parseInt(jiraStringPart) :\n            Object.keys(jiraSymbolFactorMap)\n                .map(key => jiraSymbolFactorMap[key])\n                .map(unit => {\n                    const match: RegExpMatchArray | null = jiraStringPart.match(new RegExp(\"(\\\\d+)\" + unit.symbol, \"g\"));\n                    return !match ?\n                        0 :\n                        match.map(m => Number.parseInt(m.replace(unit.symbol, \"\"), 0) * unit.factor)\n                            .reduce(toSum);\n                })\n                .reduce(toSum);\n    }\n}\n\nfunction toSum(v1: number, v2: number): number {\n    return v1 + v2;\n}\n","import Lockr from \"lockr\";\n\n\ninterface TimelogSettings {\n    expectedDailyTimelogInMinutes?: number;\n}\n\nexport default class SettingsRepository {\n    private static readonly emptySettings: TimelogSettings = {};\n\n    private static readonly settingsObjectKey = \"timelogSettings\";\n\n    static getExpectedDailyTimelogInMinutes(): number | null {\n        const {expectedDailyTimelogInMinutes} = Lockr.get(SettingsRepository.settingsObjectKey, SettingsRepository.emptySettings);\n        return expectedDailyTimelogInMinutes ? expectedDailyTimelogInMinutes : null;\n    }\n\n    static setExpectedDailyTimelogInMinutes(value: number) {\n        const timelogSettings = Lockr.get(SettingsRepository.settingsObjectKey, SettingsRepository.emptySettings);\n        Lockr.set(\"timelogSettings\", {\n            ...timelogSettings,\n            expectedDailyTimelogInMinutes: value\n        })\n    }\n}\n","import SettingsRepository from \"../local/SettingsRepository\";\n\nexport default class SettingsService {\n    static async setExpectedDailyTimelogInMinutes(value: number): Promise<void> {\n        SettingsRepository.setExpectedDailyTimelogInMinutes(value)\n    }\n\n    static async getExpectedDailyTimelogInMinutes(): Promise<number> {\n        const eightHours = 480;\n        const configuredHoursToWorkPerDay = SettingsRepository.getExpectedDailyTimelogInMinutes();\n        return Promise.resolve(configuredHoursToWorkPerDay ? configuredHoursToWorkPerDay : eightHours);\n    }\n}\n","import TimeLogService, {TimeLog} from \"../core/TimeLogService\";\nimport React from \"react\";\nimport JiraTimeService from \"../core/JiraTimeService\";\nimport \"./TimelogDayView.css\"\n\nimport deepEqual from \"deep-equal\"\nimport SettingsService from \"../core/SettingsService\";\nimport moment from \"moment\";\n\nexport interface TimelogDayViewProps {\n    day: Date;\n}\n\ninterface TimelogInput {\n    duration: string;\n    description: string;\n}\n\ninterface TimelogDayViewState {\n    timeLogs: TimelogInput[];\n    isLoadingTimeLogs: boolean;\n    expectedDailyTimeToLogInMinutes?: number;\n    expectedTimeToLogDeltaInMonthInMinutesUntill?: number\n}\n\nexport default class TimelogDayView extends React.Component<TimelogDayViewProps, TimelogDayViewState> {\n\n    private static readonly emptyTimelogInput = {\n        description: \"\",\n        duration: \"\"\n    };\n\n    constructor(props: Readonly<{ day: Date }>) {\n        super(props);\n        this.state = {\n            timeLogs: [],\n            isLoadingTimeLogs: true\n        }\n    }\n\n    private static toTimelog(timelogInput: TimelogInput): TimeLog {\n        return {\n            description: timelogInput.description,\n            durationInMinutes: JiraTimeService.jiraFormatToMinutes(timelogInput.duration)\n        };\n    }\n\n    private static toTimelogInput({description, durationInMinutes}: TimeLog) {\n        return {\n            description,\n            duration: JiraTimeService.minutesToJiraFormat(durationInMinutes)\n        };\n    }\n\n    componentDidMount(): void {\n        this.setState({\n            isLoadingTimeLogs: true\n        });\n        TimeLogService.getTimeLogsForDay(this.props.day)\n            .then(timeLogs => {\n                this.setState({\n                    timeLogs: timeLogs.length === 0 ? [{...TimelogDayView.emptyTimelogInput}] : timeLogs.map((timeLog) => TimelogDayView.toTimelogInput(timeLog)),\n                    isLoadingTimeLogs: false,\n                });\n            });\n        // TODO: marmer 23.02.2020 Errorhandling!\n        SettingsService.getExpectedDailyTimelogInMinutes()\n            .then(expectedTime => this.setState({\n                expectedDailyTimeToLogInMinutes: expectedTime\n            }))\n        // TODO: marmer 23.02.2020 Errorhandling!\n\n        TimeLogService.getExpectedTimeToLogDeltaInMonthInMinutesUntill(this.dayBefore(this.props.day))\n            .then(delta => this.setState({\n                expectedTimeToLogDeltaInMonthInMinutesUntill: delta\n            }))\n        // TODO: marmer 24.02.2020 Errorhandling!\n    }\n\n    componentDidUpdate(prevProps: Readonly<TimelogDayViewProps>, prevState: Readonly<TimelogDayViewState>,): void {\n        if (!deepEqual(this.state.timeLogs[this.state.timeLogs.length - 1], TimelogDayView.emptyTimelogInput)) {\n            this.addTimelog();\n        }\n    }\n\n    render() {\n        return <div onKeyDown={e => {\n            if (e.ctrlKey && e.key === \"s\") {\n                this.store();\n            }\n        }}>\n            <form target=\"_self\" onSubmit={() => {\n                if (this.isEachTimeLogValid())\n                    this.store();\n                return false\n            }}>{\n                this.state.isLoadingTimeLogs ?\n                    <p>Loading...</p> :\n                    <table className=\"table table-sm\">\n                        <thead>\n                        <tr>\n                            <th scope=\"col\" className=\"text-sm-center\">#</th>\n                            <th scope=\"col\" className=\"text-sm-center\">Start Time</th>\n                            <th scope=\"col\"\n                                className=\"text-sm-center\">Duration <em>{this.getDurationSumAsJiraFormat()}</em></th>\n                            <th scope=\"col\" className=\"text-sm-center\">Description</th>\n                            <th scope=\"col\" className=\"text-sm-center\">Issue</th>\n                            <th scope=\"col\" className=\"text-sm-center\">Notes</th>\n                            <th scope=\"col\" className=\"text-sm-left\">Actions</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {this.state.timeLogs.map((timeLog, index) => <tr\n                            key={index}>\n                            <th className=\"text-sm-center\" title={\"TimeLog \" + index}>{index}</th>\n                            <td><input className={\"fullWidth\"} disabled title=\"start time\" placeholder=\"09:15\"/></td>\n                            <td><input\n                                className={\"fullWidth\" + (JiraTimeService.isValidJiraFormat(timeLog.duration) ? \"\" : \" invalid-format\")}\n                                title=\"duration\" type=\"text\"\n                                placeholder={\"5h 15m\"}\n                                value={timeLog.duration}\n                                onChange={event => this.updateDuration(index, event.target.value)}/></td>\n                            <td><input className=\"fullWidth\" title=\"description\" type=\"text\"\n                                       placeholder={\"What did you to here\"} value={timeLog.description}\n                                       onChange={event => this.updateDescription(index, event.target.value)}/>\n                            </td>\n                            <td><input className={\"fullWidth\"} disabled title=\"issue\"\n                                       placeholder={\"e.g. ISSUEID-123\"}/></td>\n                            <td><input className={\"fullWidth\"} disabled title=\"notes\"\n                                       placeholder={\"Not supposed to get exported\"}/></td>\n                            <td>\n                            <span className=\"btn-group actions\">\n                                <button className=\"btn btn-outline-primary\" title=\"add before this entry\"\n                                        onClick={() => this.addTimelogBefore(index)}\n                                        type=\"button\">\n                                    <i className=\"fa fa-plus-circle\"/>\n                                </button>\n                                {index < this.state.timeLogs.length - 1 ?\n                                    <button className=\"btn btn-outline-primary\" title=\"remove this entry\"\n                                            onClick={() => this.removeTimelogAt(index)}\n                                            type=\"button\">\n                                        <i className=\"fa fa-minus-circle\"/>\n                                    </button> : <></>}\n                            </span>\n                            </td>\n                        </tr>)}\n                        <tr>\n                            <th colSpan={7}>\n                                <button className=\"btn btn-primary fullWidth\" title=\"save\"\n                                        disabled={this.isAnyTimelogInValid()}\n                                        type={\"submit\"}\n                                ><i className=\"fa fa-save\"/> save\n                                </button>\n                            </th>\n                        </tr>\n                        </tbody>\n                    </table>}</form>\n\n            <section className=\"stats\">\n                <label>\n                    Time to log by daily expectation: <input disabled title={\"time left today only\"}\n                                                             value={JiraTimeService.minutesToJiraFormat(this.getExpectedTimeToLogTodayOnly())}/>\n                </label>\n                <label>\n                    Time to log by monthly expectation: <input disabled title={\"time left monthly\"}\n                                                               value={JiraTimeService.minutesToJiraFormat(this.getExpectedTimeToLogConsideringTheWholeMonthTillToday())}/>\n                </label>\n            </section>\n        </div>\n\n    }\n\n    private getExpectedTimeToLogTodayOnly() {\n        // TODO: marmer 24.02.2020 handle this when the value is unset\n        return this.state.expectedDailyTimeToLogInMinutes! - this.getDurationSum();\n    }\n\n    private getExpectedTimeToLogConsideringTheWholeMonthTillToday() {\n        // TODO: marmer 24.02.2020 handle this if any value is unset\n        return this.state.expectedTimeToLogDeltaInMonthInMinutesUntill! + this.getExpectedTimeToLogTodayOnly();\n    }\n\n    private dayBefore(date: Date) {\n        return moment(date).subtract(1, \"day\").toDate();\n    }\n\n    private addTimelog() {\n        this.addTimelogBefore(this.state.timeLogs.length + 1);\n    }\n\n    private store() {\n        TimeLogService.saveTimeLogsForDay(this.props.day, this.state.timeLogs\n            // the last one is always empty ;)\n            .slice(0, this.state.timeLogs.length - 1)\n            .map(timelogInput => (TimelogDayView.toTimelog(timelogInput))))\n            .then(timeLogs => this.setState({\n                timeLogs: timeLogs.map(timeLog => TimelogDayView.toTimelogInput(timeLog))\n            }));\n        // TODO: marmer 23.02.2020 error handling!\n    }\n\n    private addTimelogBefore(index: number) {\n        const timeLogs = [...this.state.timeLogs];\n        timeLogs.splice(index, 0, {...TimelogDayView.emptyTimelogInput});\n\n        this.setState({\n            timeLogs\n        })\n    }\n\n    private removeTimelogAt(index: number) {\n        const timeLogs = [...this.state.timeLogs];\n        timeLogs.splice(index, 1);\n\n        this.setState({\n            timeLogs\n        })\n    }\n\n    private updateDuration(index: number, value: string) {\n        const timeLogs = [...this.state.timeLogs];\n        timeLogs[index].duration = value;\n        this.setState({\n            timeLogs\n        })\n    }\n\n    private updateDescription(index: number, value: string) {\n        const timeLogs = [...this.state.timeLogs];\n        timeLogs[index].description = value;\n        this.setState({\n            timeLogs\n        })\n    }\n\n    private isAnyTimelogInValid() {\n        return !this.isEachTimeLogValid();\n    }\n\n    private isEachTimeLogValid() {\n        return this.state.timeLogs\n            .map(timeLog => JiraTimeService.isValidJiraFormat(timeLog.duration))\n            .reduce((v1, v2) => v1 && v2, true);\n    }\n\n    private getDurationSumAsJiraFormat() {\n        return JiraTimeService.minutesToJiraFormat(this.getDurationSum());\n    }\n\n    private getDurationSum() {\n        return this.state.timeLogs\n            .map(({duration}) => JiraTimeService.isValidJiraFormat(duration) ? JiraTimeService.jiraFormatToMinutes(duration) : 0)\n            .reduce((d1, d2) => d1 + d2, 0);\n    }\n}\n","import React from \"react\";\nimport DayNavigator from \"./DayNavigator\";\nimport TimelogDayView from \"./TimelogDayView\";\n\nexport interface DayViewProps {\n    day: Date;\n}\n\n\nexport default class DayView extends React.Component<DayViewProps> {\n\n    constructor(props: Readonly<DayViewProps>) {\n        super(props);\n\n        this.state = {\n            timeLogs: null\n        }\n    }\n\n    render() {\n        return <div className=\"card\">\n            <div className=\"card-header d-flex justify-content-center\">\n                <DayNavigator day={this.props.day}/>\n            </div>\n\n            <div className=\"card-body\">\n                <TimelogDayView day={this.props.day}/>\n            </div>\n        </div>\n    }\n}\n","import React from \"react\";\n\nexport interface NotFoundViewProps {\n    location: string;\n}\n\nexport default (props: NotFoundViewProps) => <div>\n    <h1>Who told you about this location?</h1>\n    <p>Nothing to see here at: <em>{props.location}</em></p>\n</div>;\n","export default class SearchStringService {\n\n    static parse<T>(searchString: string): T {\n        return this.removeSearchStringOpening(searchString)\n            .split(\"&\")\n            .filter(kvPairs => kvPairs[0])\n            .map(kvPair => kvPair.split(\"=\"))\n            .map((([key, value]) =>\n                ({[key]: value ? decodeURIComponent(value) : \"\"})))\n            .reduce((aggregate, toAdd) =>\n                ({...aggregate, ...toAdd}), {}) as any;\n    }\n\n    static toSearchString(requestProps: { [p: string]: string | number | boolean }) {\n\n        if (!Object.keys(requestProps).length)\n            return \"?\";\n\n        return \"?\" + Object.keys(requestProps)\n            .map((key: string) => key + \"=\" + encodeURIComponent(requestProps[key]))\n            .reduce((previousValue, currentValue) => previousValue + \"&\" + currentValue);\n    }\n\n    private static removeSearchStringOpening(searchString: string) {\n        return searchString.replace(/^\\?/, \"\");\n    }\n}\n","export interface GoogleUserInfo {\n    email: string;\n}\n\nexport interface GoogleUserDto {\n    id: string;\n    email: string;\n    verified_email: boolean;\n    picture: string\n}\n\nexport default class GoogleUserInfoCrudService {\n\n    static async getUserInfo(accessToken: string): Promise<GoogleUserInfo> {\n        return fetch(\"https://www.googleapis.com/oauth2/v2/userinfo\", {\n            method: \"GET\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Authorization\": \"Bearer \" + accessToken\n            }\n        })\n            .then(response => {\n                if (response.status !== 200)\n                    throw new Error(\"Cannot get user infos. Request for User infos end with status code \" + response.status);\n                return response.json();\n            })\n            .then((dto: GoogleUserDto) => ({\n                email: dto.email\n            }));\n    }\n}\n","export default class WindowService {\n    static reload() {\n        window.location.reload();\n    }\n\n    static redirectTo(url: string) {\n        window.location.href = url;\n    }\n}\n","import {User} from \"../core/UserService\";\nimport Lockr from \"lockr\";\n\nexport default class UserRepository {\n    static removeCurrentUser() {\n        return localStorage.removeItem(\"user\");\n    }\n\n    static getCurrentUser(): User | null {\n        return Lockr.get(\"user\", null);\n    }\n\n    static setCurrentUser(user: User) {\n        Lockr.set(\"user\", user);\n    }\n}\n","import WindowService from \"./WindowService\";\nimport UserRepository from \"../local/UserRepository\";\nimport SearchStringService from \"./SearchStringService\";\nimport RemoteLoginService from \"./RemoteLoginService\";\n\nexport interface User {\n    email: string\n    accessToken: string\n}\n\nexport default class UserService {\n    static logout() {\n        RemoteLoginService.logout();\n        UserRepository.removeCurrentUser();\n        WindowService.reload();\n    }\n\n    static getCurrentUser(): User | null {\n        return UserRepository.getCurrentUser();\n    }\n\n    static getMissingEnvironmentVariables(): string[] {\n        const result: string[] = [];\n\n        if (!process.env.REACT_APP_OAUTH_CLIENT_ID)\n            result.push(\"REACT_APP_OAUTH_CLIENT_ID\");\n\n        if (!process.env.REACT_APP_OAUTH_REDIRECT_URL)\n            result.push(\"REACT_APP_OAUTH_REDIRECT_URL\");\n\n        if (!process.env.REACT_APP_OAUTH_AUTHORIZATION_URL)\n            result.push(\"REACT_APP_OAUTH_AUTHORIZATION_URL\");\n\n        return result;\n    }\n\n    static redirectToLogin() {\n        const requestProps: { [key: string]: any; } = {\n            scope: \"email https://www.googleapis.com/auth/drive.file\",\n            include_granted_scopes: true,\n            response_type: \"token\",\n            state: \"/\",\n            redirect_uri: process.env.REACT_APP_OAUTH_REDIRECT_URL ? process.env.REACT_APP_OAUTH_REDIRECT_URL : \"\",\n            client_id: process.env.REACT_APP_OAUTH_CLIENT_ID ? process.env.REACT_APP_OAUTH_CLIENT_ID : \"\"\n        };\n\n        const redirectUrl = (process.env.REACT_APP_OAUTH_AUTHORIZATION_URL ? process.env.REACT_APP_OAUTH_AUTHORIZATION_URL : \"\") +\n            SearchStringService.toSearchString(requestProps);\n\n        WindowService.redirectTo(redirectUrl);\n    }\n\n    static setCurrentuser(user: User) {\n        UserRepository.setCurrentUser(user);\n    }\n}\n","import SearchStringService from \"./SearchStringService\";\nimport GoogleUserInfoCrudService from \"../google/oauth/GoogleUserInfoCrudService\";\nimport UserService from \"./UserService\";\n\nexport interface LoginResult {\n    sourceUrl: string\n}\n\nexport interface GoogleOAuthSuccessResponse {\n    state?: string;\n    access_token: string;\n    token_type: \"Bearer\" | string;\n    expires_in: string; // seconds\n}\n\nexport interface GoogleOAuthErrorResponse {\n    error: string;\n}\n\ninterface GoogleOAuthResponse extends GoogleOAuthSuccessResponse, GoogleOAuthErrorResponse {\n}\n\nexport default class RemoteLoginService {\n    static async logout() {\n        const currentUser = UserService.getCurrentUser();\n        return currentUser ?\n            fetch(\"https://oauth2.googleapis.com/revoke?token=\" + UserService.getCurrentUser()?.accessToken, {\n                method: \"GET\",\n                headers: {\n                    \"content-type\": \"application/x-www-form-urlencoded\"\n                }\n            }) :\n            Promise.resolve()\n    }\n\n    static async loginBySearchString(searchString: string): Promise<LoginResult> {\n        const oauthResponse: GoogleOAuthResponse = SearchStringService.parse(searchString);\n\n        return GoogleUserInfoCrudService.getUserInfo(oauthResponse.access_token)\n            .then(userInfo => {\n                UserService.setCurrentuser({\n                    email: userInfo.email,\n                    accessToken: oauthResponse.access_token,\n                });\n\n                return {\n                    sourceUrl: oauthResponse.state ?\n                        oauthResponse.state :\n                        \"/\"\n                };\n            }).catch(error => Promise.reject(new Error(\"Not able to login the user. Reason: \" + error.message)));\n    }\n}\n","import React from \"react\";\nimport RemoteLoginService, {LoginResult} from \"../core/RemoteLoginService\";\nimport {Redirect} from \"react-router-dom\";\n\nexport interface LoginViewProps {\n    searchString: string;\n}\n\n\nexport default class LoginView extends React.Component<LoginViewProps, { loginResult?: LoginResult, loginError?: Error }> {\n\n\n    constructor(props: Readonly<LoginViewProps>) {\n        super(props);\n        this.state = {};\n    }\n\n    componentDidMount(): void {\n        RemoteLoginService.loginBySearchString(this.props.searchString)\n            .then(loginResult => this.setState({\n                loginResult\n            }))\n            .catch(loginError => this.setState({loginError}))\n    }\n\n    render() {\n        if (this.state.loginResult) {\n            return <Redirect to={this.state.loginResult?.sourceUrl}/>\n        } else if (this.state.loginError) {\n            return <div>Error while trying to log you in. Reason: {this.state.loginError?.message}</div>\n        } else {\n            return <div>requesting user data...</div>;\n        }\n    }\n}\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport projectConfiguration from \"../../package.json\"\nimport {Link, NavLink} from \"react-router-dom\";\n\nexport default () => <header>\n    <nav className=\"navbar navbar-dark bg-dark\">\n        <Link to={\"/days/today\"} className=\"navbar-brand\">\n            <img src=\"/time-log/logo192.png\" width=\"30\" height=\"30\"\n                 className=\"d-inline-block align-top\" alt=\"logo\">\n            </img> {projectConfiguration.name}</Link>\n        <div className=\"navbar-expand\">\n            <div className=\"navbar-nav\">\n                <NavLink to={\"/days/today\"}\n                         isActive={(match, location) => location.pathname.startsWith(\"/day\")}\n                         className=\"nav-item nav-link\"\n                         activeClassName=\"active\">Logs</NavLink>\n                <NavLink to={\"/settings\"} className=\"nav-item nav-link\" activeClassName=\"active\">Settings</NavLink>\n            </div>\n        </div>\n    </nav>\n</header>;\n\n\n","import React, {useEffect, useState} from \"react\";\nimport UserService from \"../../core/UserService\";\n\ninterface File {\n    id: string,\n    name: string,\n    content?: string;\n}\n\ninterface FileListResponseEntryDto {\n    \"id\": string\n    \"name\": string,\n    \"mimeType\": string\n}\n\ninterface GoogleFileListResponseDto {\n    \"files\": FileListResponseEntryDto[]\n}\n\nfunction FileRespoinseView(props: { files: { [id: string]: File }, deleteCallback: (file: File) => void }) {\n    return <div>\n        <table>\n            <thead>\n            <tr>\n                <th>id</th>\n                <th>name</th>\n                <th>content</th>\n                <th>action</th>\n            </tr>\n            </thead>\n            <tbody>\n                {Object.keys(props.files)\n                    .map(key => props.files[key])\n                    .map(file =>\n                        <tr>\n                            <td>{file.id}</td>\n                            <td>{file.name}</td>\n                            <td>{file.content}</td>\n                            <td>\n                                <button onClick={() => {\n                                    deleteDriveFile(file.id)\n                                        .then(() => props.deleteCallback(file));\n                                }}>delete\n                                </button>\n                            </td>\n                        </tr>)}\n            </tbody>\n        </table>\n    </div>\n}\n\nfunction loadFiles(setDriveFiles: (value: (((prevState: { [p: string]: File }) => { [p: string]: File }) | { [p: string]: File })) => void) {\n    if (UserService.getCurrentUser())\n        fetch(\"https://www.googleapis.com/drive/v3/files?=\", {\n            \"method\": \"GET\",\n            \"headers\": {\n                \"accept\": \"application/json\",\n                \"authorization\": \"Bearer \" + UserService.getCurrentUser()?.accessToken\n            }\n        })\n            .then(response => {\n                if (response.status !== 200) throw new Error(\"bad status code\");\n                return response.json();\n            })\n            .then(response => {\n                return response as GoogleFileListResponseDto\n            })\n            .then(fileList => {\n                const driveFiles = fileList.files\n                    .map(({id, name}) => ({[id]: {id, name} as File}))\n                    .reduce((f1, f2) => ({...f1, ...f2}));\n                setDriveFiles(driveFiles);\n\n                loadFileContentFor(driveFiles, setDriveFiles);\n            })\n            .catch(err => {\n                console.log(err);\n            });\n}\n\nfunction loadFileContentFor(driveFiles: { [id: string]: File }, setDriveFiles: (value: (((prevState: { [p: string]: File }) => { [p: string]: File }) | { [p: string]: File })) => void) {\n    if (UserService.getCurrentUser())\n        Object.keys(driveFiles)\n            .forEach(id => {\n                fetch(`https://www.googleapis.com/drive/v3/files/${id}?alt=media`, {\n                    \"method\": \"GET\",\n                    \"headers\": {\n                        \"authorization\": `Bearer ${UserService.getCurrentUser()?.accessToken}`\n                    }\n                })\n                    .then(response => {\n                        console.log(response);\n                        return response.text()\n                    })\n                    .then(fileContent => {\n                        const df = {...driveFiles};\n                        df[id].content = fileContent;\n                        setDriveFiles(df)\n                    })\n                    .catch(err => {\n                        console.log(err);\n                    });\n            });\n}\n\nfunction deleteDriveFile(id: string) {\n    return fetch(`https://www.googleapis.com/drive/v3/files/${id}`, {\n        \"method\": \"DELETE\",\n        \"headers\": {\n            \"accept\": \"application/json\",\n            \"authorization\": `Bearer ${UserService.getCurrentUser()?.accessToken}`\n        }\n    });\n}\n\nfunction deleteDriveFiles(driveFiles: { [p: string]: File }): Promise<any> {\n    if (UserService.getCurrentUser())\n        return Promise.all(Object.keys(driveFiles)\n            .map(id => deleteDriveFile(id)));\n    return Promise.resolve();\n}\n\nfunction createFile(file: { name: string; content: string }): Promise<any> {\n    return fetch(\"https://www.googleapis.com/upload/drive/v3/files?uploadType=multipart\", {\n        \"method\": \"POST\",\n        \"headers\": {\n            \"accept\": \"application/json\",\n            \"content-type\": \"multipart/related; boundary=nice_boundary_name\",\n            \"authorization\": `Bearer ${UserService.getCurrentUser()?.accessToken}`\n        },\n        \"body\": `--nice_boundary_name\nContent-Type: application/json; charset=UTF-8\n\n{\n  \"name\": \"${file.name}\"\n}\n\n--nice_boundary_name\nContent-Type: application/json; charset=UTF-8\n\n${file.content}\n\n--nice_boundary_name--`\n    })\n        .then(response => {\n            console.log(response);\n        })\n        .catch(err => {\n            console.log(err);\n        });\n}\n\n\n// ---- updateExample: ----\n// curl --request PATCH \\\n//   --url 'https://www.googleapis.com/upload/drive/v3/files/1J0v7U2B_GswHPo3Vbuu67jYvtls4uaIQ?uploadType=media' \\\n//   --header 'accept: application/json' \\\n//   --header 'authorization: Bearer ya29.Il-9ByIRxhjOLylx88WfEC6W1uLG42J16nXiAhVTXUkfoh5LLvGUZyN4aMEwh3rBc0RlV8ncjksxy8dzZ31hqEBuaxh9-fTKqsPoweE8uJonGoYIb6doE-6hgRGfClYS3w' \\\n//   --header 'content-type: application/json' \\\n//   --data '{\n// \"newKey\":\"withNewValue\"\n// }'\n\n// ---- search for filename example ----\n// curl --request GET \\\n//   --url 'https://www.googleapis.com/drive/v3/files?q=name%20contains%20'\\''Verzeichnis'\\''' \\\n//   --header 'accept: application/json' \\\n//   --header 'authorization: Bearer ya29.Il-9ByIRxhjOLylx88WfEC6W1uLG42J16nXiAhVTXUkfoh5LLvGUZyN4aMEwh3rBc0RlV8ncjksxy8dzZ31hqEBuaxh9-fTKqsPoweE8uJonGoYIb6doE-6hgRGfClYS3w'\n\nexport default () => {\n    const [driveFiles, setDriveFiles] = useState<{ [id: string]: File }>({});\n    const [newFileContent, setNewFileContent] = useState<string>('{\\n  \"some\": \"content\"\\n}');\n    const [newFileName, setNewFileName] = useState<string>(`${Math.random()}.json`);\n\n    useEffect(() => {\n        loadFiles(setDriveFiles);\n    }, []);\n\n    return <div>\n        <label>File List of google drive files List metadata<FileRespoinseView files={driveFiles}\n                                                                               deleteCallback={file => {\n                                                                                   const df = {...driveFiles};\n                                                                                   delete df[file.id];\n                                                                                   setDriveFiles(df);\n                                                                               }\n                                                                               }/></label>\n        <button onClick={() => {\n            deleteDriveFiles(driveFiles)\n                .then(() => setDriveFiles({}));\n        }}>\n            Delete all!\n        </button>\n        <label>\n            File name\n            <input value={newFileName} onChange={event => setNewFileName(event.target.value)}/>\n        </label>\n        <label>\n            File content\n            <textarea value={newFileContent} onChange={event => setNewFileContent(event.target.value)}/>\n        </label>\n        <button onClick={() => createFile({name: newFileName, content: newFileContent})\n            .then(() => loadFiles(setDriveFiles))}>add\n        </button>\n    </div>\n}\n\n","import React from \"react\";\nimport UserService from \"../core/UserService\";\n\n\nexport default () => {\n    const missingEnvironmentVariables = UserService.getMissingEnvironmentVariables();\n    if (missingEnvironmentVariables && missingEnvironmentVariables.length) return <section>\n        <strong>Server Missconfiguration. Set the following environment variables are not set properly:</strong>\n        {missingEnvironmentVariables.map(envVar => <div key={envVar}>{envVar}</div>)}\n    </section>;\n\n    const currentUser = UserService.getCurrentUser();\n    return currentUser ? (\n        <section>\n            <p>{currentUser.email}</p>\n            <button onClick={() => UserService.logout()}>\n                Logout\n            </button>\n        </section>\n    ) : (\n        <section>\n            <button onClick={() => UserService.redirectToLogin()}>\n                Login\n            </button>\n        </section>\n    )\n};\n","import GoogleDriveSpikeView from \"./GoogleDriveSpikeView\";\nimport React from \"react\";\nimport UserView from \"../UserView\";\n\nexport default function DevModeView() {\n    return localStorage.getItem(\"devMode\") ? <div className=\"devMode\">\n        <UserView/>\n        <GoogleDriveSpikeView/>\n    </div> : <></>\n}\n","import React, {useEffect, useState} from \"react\";\nimport SettingsService from \"../core/SettingsService\";\nimport JiraTimeService from \"../core/JiraTimeService\";\n\nexport default function DailyTimelogSettingsView() {\n    const loadingPlaceholder = \"Loading...\";\n\n    const [expectedDailyTimelogInMinutes, setExpectedDailyTimelogInMinutes] = useState<{\n        value: string,\n        isLoading: boolean\n    }>({value: loadingPlaceholder, isLoading: true});\n\n    useEffect(() => {\n        setExpectedDailyTimelogInMinutes({\n            isLoading: true,\n            value: loadingPlaceholder\n        });\n        SettingsService.getExpectedDailyTimelogInMinutes()\n            .then(minutes => {\n                setExpectedDailyTimelogInMinutes({\n                    isLoading: false,\n                    value: JiraTimeService.minutesToJiraFormat(minutes)\n                });\n            })\n    }, []);\n    return <div className=\"card\">\n        <div className=\"card-header\">\n            Day Settings\n        </div>\n        <div className=\"form-group row card-body\">\n            <form onSubmit={_ => {\n                SettingsService.setExpectedDailyTimelogInMinutes(JiraTimeService.jiraFormatToMinutes(expectedDailyTimelogInMinutes.value));\n                return false;\n            }}>\n                <label>Expected Time to log per day <input id=\"expectedTimeToLog\" type=\"text\"\n                                                           className={(JiraTimeService.isValidJiraFormat(expectedDailyTimelogInMinutes.value) ? \"\" : \" invalid-format\")}\n                                                           disabled={expectedDailyTimelogInMinutes.isLoading}\n                                                           value={expectedDailyTimelogInMinutes.value}\n                                                           onChange={({target}) => setExpectedDailyTimelogInMinutes({\n                                                               ...expectedDailyTimelogInMinutes, value: target.value\n                                                           })}\n                                                           placeholder=\"e.g. 7h 30m\"/>\n                </label>\n                <button className=\"btn btn-primary fullWidth\" title=\"save\"\n                        disabled={!JiraTimeService.isValidJiraFormat(expectedDailyTimelogInMinutes.value)}\n                        type={\"submit\"}><i className=\"fa fa-save\"/> save\n                </button>\n            </form>\n        </div>\n    </div>\n}\n","import React from \"react\";\nimport DailyTimelogSettingsView from \"./DailyTimelogSettingsView\";\n\n\nexport default () => {\n    return <section>\n        <DailyTimelogSettingsView/>\n    </section>\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\nimport \"./index.css\"\n\nReactDOM.render(<BrowserRouter basename={\"time-log\"}><App/></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\nimport {Redirect, Route, Switch} from \"react-router-dom\";\nimport DayView from \"./DayView\";\nimport NotFoundView from \"./NotFoundView\";\nimport moment from \"moment\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\nimport LoginView from \"./LoginView\";\nimport HeaderView from \"./HeaderView\";\nimport DevModeView from \"./__spikes__/DevModeView\";\nimport SettingsView from \"./SettingsView\";\n\nexport default function App() {\n    return (<>\n            <HeaderView/>\n            <DevModeView/>\n            <main>\n                <Route render={globalRouteProps => {\n                    globalRouteProps.history.listen(() => window.location.reload());\n                    return <Switch>\n                        <Route exact path=\"/login/:provider\"\n                               render={loginRoutProps => <LoginView searchString={loginRoutProps.location.search}/>}/>\n                        <Route exact path=\"/\">\n                            <Redirect to={\"/days\"}/>\n                        </Route>\n                        <Route exact path=\"/days\">\n                            <Redirect to={\"/days/today\"}/>\n                        </Route>\n                        <Route exact path=\"/days/today\">\n                            <DayView day={new Date()}/>\n                        </Route>\n                        <Route exact path=\"/days/:day\" render={dayRouteProps =>\n                            moment(dayRouteProps.match.params.day).isValid() ?\n                                <DayView day={moment(dayRouteProps.match.params.day).toDate()}/> :\n                                <NotFoundView location={dayRouteProps.location.pathname}/>}/>\n                        <Route exact path=\"/settings\">\n                            <SettingsView/>\n                        </Route>\n                        <Route render={routeProps =>\n                            <NotFoundView location={routeProps.location.pathname}/>\n                        }/>\n                    </Switch>\n                }}>\n\n                </Route>\n            </main>\n        </>\n    );\n}\n\n"],"sourceRoot":""}